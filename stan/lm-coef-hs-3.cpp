// Code generated by Stan version 2.15.0

#include <stan/model/model_header.hpp>

namespace model6d2379a4b5e1_lm_coef_hs_3_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model6d2379a4b5e1_lm_coef_hs_3 : public prob_grad {
private:
    int N;
    vector_d y;
    int K;
    matrix_d X;
    double df_local;
    double df_global;
    double y_sd;
    double a_pr_scale;
    double sigma_pr_scale;
public:
    model6d2379a4b5e1_lm_coef_hs_3(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model6d2379a4b5e1_lm_coef_hs_3(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model6d2379a4b5e1_lm_coef_hs_3_namespace::model6d2379a4b5e1_lm_coef_hs_3";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        validate_non_negative_index("y", "N", N);
        context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
            y[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        X = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "df_local", "double", context__.to_vec());
        df_local = double(0);
        vals_r__ = context__.vals_r("df_local");
        pos__ = 0;
        df_local = vals_r__[pos__++];
        context__.validate_dims("data initialization", "df_global", "double", context__.to_vec());
        df_global = double(0);
        vals_r__ = context__.vals_r("df_global");
        pos__ = 0;
        df_global = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"df_local",df_local,0.0);
        check_greater_or_equal(function__,"df_global",df_global,0.0);
        // initialize data variables
        y_sd = double(0);
        stan::math::fill(y_sd,DUMMY_VAR__);
        a_pr_scale = double(0);
        stan::math::fill(a_pr_scale,DUMMY_VAR__);
        sigma_pr_scale = double(0);
        stan::math::fill(sigma_pr_scale,DUMMY_VAR__);

        try {
            current_statement_begin__ = 18;
            stan::math::assign(y_sd, sd(y));
            current_statement_begin__ = 19;
            stan::math::assign(sigma_pr_scale, (y_sd * 5.0));
            current_statement_begin__ = 20;
            stan::math::assign(a_pr_scale, 10.0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data
        check_greater_or_equal(function__,"y_sd",y_sd,0.0);

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        validate_non_negative_index("b_raw", "K", K);
        num_params_r__ += K;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("lambda", "K", K);
        num_params_r__ += K;
        ++num_params_r__;
    }

    ~model6d2379a4b5e1_lm_coef_hs_3() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("a")))
            throw std::runtime_error("variable a missing");
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        context__.validate_dims("initialization", "a", "double", context__.to_vec());
        // generate_declaration a
        double a(0);
        a = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(a);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a: ") + e.what());
        }

        if (!(context__.contains_r("b_raw")))
            throw std::runtime_error("variable b_raw missing");
        vals_r__ = context__.vals_r("b_raw");
        pos__ = 0U;
        validate_non_negative_index("b_raw", "K", K);
        context__.validate_dims("initialization", "b_raw", "vector_d", context__.to_vec(K));
        // generate_declaration b_raw
        vector_d b_raw(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            b_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b_raw: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        // generate_declaration sigma
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("p0")))
            throw std::runtime_error("variable p0 missing");
        vals_r__ = context__.vals_r("p0");
        pos__ = 0U;
        context__.validate_dims("initialization", "p0", "double", context__.to_vec());
        // generate_declaration p0
        double p0(0);
        p0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0,p0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable p0: ") + e.what());
        }

        if (!(context__.contains_r("lambda")))
            throw std::runtime_error("variable lambda missing");
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "K", K);
        context__.validate_dims("initialization", "lambda", "vector_d", context__.to_vec(K));
        // generate_declaration lambda
        vector_d lambda(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            lambda(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0.0,lambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "double", context__.to_vec());
        // generate_declaration tau
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ a;
        (void) a;  // dummy to suppress unused var warning
        if (jacobian__)
            a = in__.scalar_constrain(lp__);
        else
            a = in__.scalar_constrain();

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b_raw;
        (void) b_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            b_raw = in__.vector_constrain(K,lp__);
        else
            b_raw = in__.vector_constrain(K);

        T__ sigma;
        (void) sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.scalar_lb_constrain(0.0,lp__);
        else
            sigma = in__.scalar_lb_constrain(0.0);

        T__ p0;
        (void) p0;  // dummy to suppress unused var warning
        if (jacobian__)
            p0 = in__.scalar_lb_constrain(0.0,lp__);
        else
            p0 = in__.scalar_lb_constrain(0.0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  lambda;
        (void) lambda;  // dummy to suppress unused var warning
        if (jacobian__)
            lambda = in__.vector_lb_constrain(0.0,K,lp__);
        else
            lambda = in__.vector_lb_constrain(0.0,K);

        T__ tau;
        (void) tau;  // dummy to suppress unused var warning
        if (jacobian__)
            tau = in__.scalar_lb_constrain(0.0,lp__);
        else
            tau = in__.scalar_lb_constrain(0.0);


        // transformed parameters
        validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(N));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        validate_non_negative_index("b", "K", K);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>(K));
        (void) b;  // dummy to suppress unused var warning

        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b,DUMMY_VAR__);
        T__ tau0;
        (void) tau0;  // dummy to suppress unused var warning

        stan::math::initialize(tau0, DUMMY_VAR__);
        stan::math::fill(tau0,DUMMY_VAR__);


        try {
            current_statement_begin__ = 42;
            stan::math::assign(tau0, (((p0 * (K - p0)) * sigma) / sqrt(N)));
            current_statement_begin__ = 43;
            stan::math::assign(b, elt_multiply(multiply(b_raw,tau),lambda));
            current_statement_begin__ = 44;
            stan::math::assign(mu, multiply(X,b));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(mu(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < K; ++i0__) {
            if (stan::math::is_uninitialized(b(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        if (stan::math::is_uninitialized(tau0)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: tau0";
            throw std::runtime_error(msg__.str());
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"tau0",tau0,0.0);

        // model body
        try {

            current_statement_begin__ = 48;
            lp_accum__.add(student_t_log<propto__>(lambda, df_local, 0.0, 1.0));
            current_statement_begin__ = 49;
            lp_accum__.add(normal_log<propto__>(a, 0.0, a_pr_scale));
            current_statement_begin__ = 50;
            lp_accum__.add(normal_log<propto__>(b_raw, 0.0, 1.0));
            current_statement_begin__ = 51;
            lp_accum__.add(student_t_log<propto__>(tau, df_global, 0.0, tau0));
            current_statement_begin__ = 52;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0.0, sigma_pr_scale));
            current_statement_begin__ = 54;
            lp_accum__.add(normal_log<propto__>(y, mu, sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a");
        names__.push_back("b_raw");
        names__.push_back("sigma");
        names__.push_back("p0");
        names__.push_back("lambda");
        names__.push_back("tau");
        names__.push_back("mu");
        names__.push_back("b");
        names__.push_back("tau0");
        names__.push_back("y_rep");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model6d2379a4b5e1_lm_coef_hs_3_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double a = in__.scalar_constrain();
        vector_d b_raw = in__.vector_constrain(K);
        double sigma = in__.scalar_lb_constrain(0.0);
        double p0 = in__.scalar_lb_constrain(0.0);
        vector_d lambda = in__.vector_lb_constrain(0.0,K);
        double tau = in__.scalar_lb_constrain(0.0);
        vars__.push_back(a);
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(b_raw[k_0__]);
        }
        vars__.push_back(sigma);
        vars__.push_back(p0);
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
        }
        vars__.push_back(tau);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("mu", "N", N);
        vector_d mu(static_cast<Eigen::VectorXd::Index>(N));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu,DUMMY_VAR__);
        validate_non_negative_index("b", "K", K);
        vector_d b(static_cast<Eigen::VectorXd::Index>(K));
        (void) b;  // dummy to suppress unused var warning

        stan::math::initialize(b, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(b,DUMMY_VAR__);
        double tau0(0.0);
        (void) tau0;  // dummy to suppress unused var warning

        stan::math::initialize(tau0, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(tau0,DUMMY_VAR__);


        try {
            current_statement_begin__ = 42;
            stan::math::assign(tau0, (((p0 * (K - p0)) * sigma) / sqrt(N)));
            current_statement_begin__ = 43;
            stan::math::assign(b, elt_multiply(multiply(b_raw,tau),lambda));
            current_statement_begin__ = 44;
            stan::math::assign(mu, multiply(X,b));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"tau0",tau0,0.0);

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(b[k_0__]);
        }
        vars__.push_back(tau0);

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("y_rep", "N", N);
        vector_d y_rep(static_cast<Eigen::VectorXd::Index>(N));
        (void) y_rep;  // dummy to suppress unused var warning

        stan::math::initialize(y_rep, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(y_rep,DUMMY_VAR__);
        validate_non_negative_index("log_lik", "N", N);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            current_statement_begin__ = 61;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 62;
                stan::math::assign(get_base1_lhs(y_rep,n,"y_rep",1), normal_rng(get_base1(mu,n,"mu",1),sigma, base_rng__));
                current_statement_begin__ = 63;
                stan::math::assign(get_base1_lhs(log_lik,n,"log_lik",1), normal_log(get_base1(y,n,"y",1),get_base1(mu,n,"mu",1),sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_rep[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model6d2379a4b5e1_lm_coef_hs_3";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p0";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau0";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p0";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau0";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model6d2379a4b5e1_lm_coef_hs_3_namespace::model6d2379a4b5e1_lm_coef_hs_3 stan_model;

