[
["index.html", "Updating: A Set of Bayesian Notes Preface", " Updating: A Set of Bayesian Notes Jeffrey B. Arnold Preface Notes on Bayesian methods - written to supplement CS&amp;SS/STAT 564: Bayesian Statistics for the Social Sciences. These notes largely focus on the application and theory necessary for quantitative social scientists to successfully apply Bayesian statistical methods. I also don’t hesitate to link to those who have already explained things well, and focus my efforts on places where I haven’t found good explanations (or explanations I understand), or places where I need to write notes to deepen my own understanding. All these chapters will use the rstan package library(&quot;rstan&quot;) "],
["bayesian-inference.html", "1 Bayesian Inference", " 1 Bayesian Inference "],
["markov-chain-monte-carlo.html", "2 Markov Chain Monte Carlo 2.1 Monte Carlo Sampling 2.2 Markov Chain Monte Carlo Sampling 2.3 References", " 2 Markov Chain Monte Carlo 2.1 Monte Carlo Sampling Monte Carlo methods are used to numerically approximate integrals, when the integral function is not tractable but the function being integrated is. In Bayesian stats, the mean of a probability density \\(p(\\theta)\\) is \\[ \\mu = \\int_{\\Theta} \\theta p(\\theta) \\, d \\theta . \\] Except for cases in which the distribution \\(p(\\theta)\\) has a known form (not the case for most applied models) for functional form of the integral isn’t known, but \\(p(\\theta)\\) is The Monte Carlo estimate of \\(\\mu\\) is. Draw \\(N\\) independent samples, \\(\\theta^{(1)}, \\dots, \\theta^{(N)}\\), from \\(p(\\theta)\\) Estimate \\(\\hat{\\mu}\\) with, \\[ \\hat{\\mu} = \\frac{1}{N} \\sum_{n = 1}^N \\theta^{(N)} . \\] If \\(p(\\theta)\\) has finite mean and variance, the law of large numbers ensures that the Monte Carlo estimate converges to the true value \\[ \\lim_{N \\to \\infty} \\hat\\mu \\to \\mu \\] and the estimation error is governed by the CLT, \\[ | \\mu - \\hat{\\mu} | \\propto \\frac{1}{\\sqrt{N}} \\] Example The mean of \\(Y = X^2\\) where \\(X \\sim \\dnorm(0, 1)\\). Draw a sample from \\(Y\\), x &lt;- rnorm(1024, 0, 1) ^ 2 The Monte Carlo estimates of the mean is mean(x) #&gt; [1] 0.977 with standard error, sd(x) / sqrt(length(x)) #&gt; [1] 0.042 2.2 Markov Chain Monte Carlo Sampling Problem: Monte Carlo sampling requires the samples to be independent. But what if you cannot draw independent samples? Solution: Markov Chain Monte Carlo are a class of algorithms to sample from a distribution when independent samples cannot be drawn. However, the samples in MCMC will be dependent. 2.3 References Stan Development Team (2016 Ch. 28) "],
["mcmc-diagnostics.html", "3 MCMC Diagnostics 3.1 Convergence Diagnostics 3.2 Autocorrelation, Effective Sample Size, and MCSE 3.3 HMC Specific Diagnostics 3.4 References", " 3 MCMC Diagnostics There are two parts of checking a Bayesian model: diagnostics: Is the sampler working? Is it adequately approximating the specified posterior distribution: \\(p(\\theta | D)\\). model fit: Does the model adequately represent the data? 3.1 Convergence Diagnostics Under certain conditions, MCMC algorithms will draw a sample from the target posterior distribution after it has converged to equilbrium. However, since in practice, any sample is finite, there is no guarantee about whether its converged, or is close enough to the posterior distribution. In general there is no way to prove that the sampler has converged.1 However, there are several statistics that indicate that a sampler has not converged. 3.1.1 Potential Scale Reduction (\\(\\hat{R}\\)) In equilibrium, the distribution of samples from chains should be the same regardless of the initial starting values of the chains (Stan Development Team 2016, Sec 28.2). One way to check this is to compare the distributions of multiple chains—in equilibrium they should all have the same mean. Additionally, the split \\(\\hat{R}\\) tests for convergence by splitting the chain in half, and testing the hypothesis that the means are the same in each half. This tests for non-stationarity within a chain. See Stan Development Team (2016 Sec 28.2) for the equations to calculate these. TODO: Examples of passing and non-passing Rhat chains using fake data generated from known functions with a given autocorrelation. Rule of Thumb: The rule of thumb is that R-hat values for all less than 1.1 source. Note that all parameters must show convergence. This is a necessary but not sufficient condition for convergence. 3.2 Autocorrelation, Effective Sample Size, and MCSE MCMC samples are dependent. This does not effect the validity of inference on the posterior if the samplers has time to explore the posterior distribution, but it does affect the efficiency of the sampler. In other words, highly correlated MCMC samplers requires more samples to produce the same level of Monte Carlo error for an estimate. 3.2.1 Autocorrelation The effective sample size (ESS) measures the amount by which autocorrelation in samples increases uncertainty (standard errors) relative to an independent sample. Suppose that the \\(\\rho^2_t\\) is the ACF function of a sample of size \\(N\\), the effective sample size, \\(N_eff\\), is \\[ N_{eff} = \\frac{N}{\\sum_{t = -\\infty}^\\infty \\rho_t} = \\frac{N}{1 + 2 \\sum_{t = -\\infty}^\\infty \\rho_t}. \\] TODO show that if \\(\\rho_t = 1\\) for all \\(t\\) then \\(N_eff = 1\\), and if \\(\\rho_t = 0\\) for all \\(t\\) then \\(N_eff = N\\). See also Stan Development Team (2016 Sec 28.4), Geyer (2011), and Gelman et al. (2013). Thinning Since the autocorrelation tends to decrease as the lag increases, thinning samples will reduce the final autocorrelation in the sample while also reducing the total number of samples saved. Due to the autocorrelation, the reduction in the number of effective samples will often be less than number of samples removed in thinning. Both of these will produce 1,000 samples from the poserior, but effective sample size of \\(B\\) will be greater than the effective sample size of \\(A\\), since after thinnin g the autocorrelation in \\(B\\) will be lower. A Generating 1,000 samples after convergence and save all of them B Generating 10,000 samples after convergence and save every 10th sample In this case, A produces 10,000 samples, and B produces 1,000. The effective sample size of A will be higher than B. However, due to autocorrelation, the proportional reduction in the effective sample size in B will be less than the thinning: \\(N_{eff}(A) / N_{eff}(B) &lt; 10\\). A Generating 10,000 samples after convergence and save all of them B Generating 10,000 samples after convergence and save every 10th sample Thinning trades off sample size for memory, and due to autocorrelation in samples, loss in effective sample size is less than the loss in sample size. Example: Comparison of the effective sample sizes for data generated with various levels of autocorrelation. The package rstan does not directly expose the function it uses to calculate ESS, so this ess function does so (for a single chain). ess &lt;- function(x) { N &lt;- length(x) V &lt;- map_dbl(seq_len(N - 1), function(t) { mean(diff(x, lag = t) ^ 2, na.rm = TRUE) }) rho &lt;- head_while(1 - V / var(x), `&gt;`, y = 0) N / (1 + sum(rho)) } n &lt;- 1024 ess(rnorm(n)) #&gt; [1] 1024 ess(arima.sim(list(ar = 0.5), n)) #&gt; [1] 1024 ess(arima.sim(list(ar = 0.75), n)) #&gt; [1] 653 ess(arima.sim(list(ar = 0.875), n)) #&gt; [1] 328 ess(arima.sim(list(ar = 0.99), n)) #&gt; [1] 67 3.2.2 Monte Carlo Standard Error (MCSE) The Monte Carlo standard error is the uncertainty about a statistic in the sample due to sampling error. With a independent sample of size \\(N\\), the MCSE for the sample mean is \\[ MCSE(\\bar{\\theta}) = \\frac{s}{\\sqrt{N}} \\] where \\(s\\) is the sample standard deviation. However, MCMC are generally not independent, and the MCSE will be higher than that of an independent sample. One way to calculate the MCSE with autocorrelated samples is to use the effective sample size instead of the sample size, \\[ MCSE(\\bar{\\theta}) = \\frac{s}{\\sqrt{N_{eff}}} \\] MCSE for common values: the mean, and any posterior probabilities: mean \\(s_\\theta / \\sqrt{S}\\) probability \\(\\sqrt{p (1 - p) / S}\\) The estimation of standard errors for quantiles, as would be used in is more complicated. See the package mcmcse for Monte Carlo standard errors of quantiles (though calculated in a different method than rstan). See Gelman et al. (2013 Sec. 10.5). 3.3 HMC Specific Diagnostics HMC produces several diagnostics that indicate that the sampler is breaking and, thus, not sampling from the posterior distribution. This is unusual, as most Bayesian sampling methods do not give indication of whether they are working well, and all that can be checked are the properties of the samples themselves with methods like \\(\\hat{R}\\). The two diagnostics that HMC provides are divergent transitions maximum treedepth The HMC sampler has two tuning parameters Stepsize: Length of the steps to take Treedepth: Number of steps to take Stan chooses intelligent defaults for these values. However, this does not always work, and the divergent transitions and maximum treedepth tuning parameters indicate that these parameters should be adjusted. 3.3.1 Divergent transitions The problem: The details of the HMC are technical and can be found TODO. The gist of the problem is that Stan is using a discrete approximation of a continuous function when integrating. If the step sizes are too large, the discrete approximation does not work. Helpfully, when the approximation is poor it does not fail without any indication but will produce “divergent transitions”. If there are too many divergent transitions, then the sampler is not drawing samples from the entire posterior and inferences will be biased The solution: Reduce the step size. This can be done by increasing the the adapt_delta parameter. This is the target average proposal acceptance probability in the adaptation, which is used to determine the step size during warmup. A higher desired acceptance probability (closer to 1) reduces the the step size. A smaller step size means that it will require more steps to explore the posterior distribution. See Stan Development Team (2016, 380) 3.3.2 Maximum Treedepth The problem: NUTS is an intelligent method to select the number of steps to take in each iteration. However, there is still a maximum number of steps that NUTS will try. If the sampler is often hitting the maximum number of steps, it means that the optimal number of steps to take in each iteration is higher than the maximum. While divergent transitions bias inference, a too-small maximum treedepth only affects efficiency. The sampler is still exploring the posterior distribution, but the exploration will be slower and the autocorrelation higher (effective sample size lower) than if the maximum treedepth were set higher. The solution: Increase the maximum treedepth. 3.4 References see Gelman et al. (2013, 267) Stan2016a [Ch 28.] for how Stan calculates Rhat, autocorrelations, and ESS. See Flegal, Haran, and Jones (2008) and the mcmcse for methods to calculate MCMC standard errors and an argument for using ESS as a stopping rule for Bayesian inference. Talk by Geyer on MCSE This is also the case in optimization with non-convex objective functions.↩ "],
["posterior-inference.html", "4 Posterior Inference 4.1 Prerequisites 4.2 Introduction 4.3 Functions of the Posterior Distribution 4.4 Marginal Effects", " 4 Posterior Inference 4.1 Prerequisites The haven package is used to read Stata .dta files. library(&quot;rubbish&quot;) library(&quot;haven&quot;) 4.2 Introduction The posterior distribution is the probability distribution \\(\\Pr(\\theta | y)\\). One we have the posterior distribution, or more often a sample from the posterior distribution, it is relatively easy to perform inference on any function of the posterior. Common statistics used to summarize the posterior distribution: mean: \\(\\E(p(\\theta | y)) \\approx \\frac{1}{S} \\sum_{i = 1}^S \\theta^{(s)}\\) median: \\(\\median(p(\\theta | y)) \\approx \\median \\theta^{(s)}\\) quantiles: 2.5%, 5%, 25%, 50%, 75%, 95%, 97.5% credible interval: central credible interval: the interval between the p/2% and 1 - p/2% quantiles highest posterior density interval: the narrowest interval containing p% of distribution marginal densities 4.3 Functions of the Posterior Distribution It is also easy to conduct inference on functions of the posterior distribution. Suppose \\(\\theta^{(1)}, \\dots, \\theta^{(S)}\\) are a sample from \\(p(\\theta | y)\\), the \\(f(\\theta^{(1)}), \\dots, f(\\theta^{(S)})\\) are a sample from \\(p(f(\\theta) | y)\\). This is not easy for methods like MLE that produce point estimates: Even in OLS, non-linear functions coefficients generally require either the Delta method or bootstrapping to calculate confidence intervals. Berry, Golder, and Milton (2012), Golder (2017),Brambor, Clark, and Golder (2006) discuss calculating confidence intervals See Rainey (2016) on “transformation induced bias” See Carpenter (2016) on how reparameterization affects point estimates; this is a Stan Case study with working code 4.4 Marginal Effects 4.4.1 Example: Marginal Effect Plot for X Berry, Golder, and Milton (2012) replicates Alexseev (2006) as an example of a model with an interaction between \\(X\\) and \\(Z\\). \\[ Y = \\beta_0 + \\beta_x X + \\beta_z Z + \\beta_{xz} X Z + \\epsilon \\] In this case, the hypothesis of interest involves the marginal effect of \\(X\\) on \\(Y\\), \\[ \\frac{\\partial \\E(Y|.)}{\\partial X} = \\beta_z + \\beta_{xz} Z \\] Since there is an interaction, the marginal effect of \\(X\\) is not simply the coefficient \\(\\beta_z\\), but is a function of another predictor, \\(Z\\). Point estimates of the marginal effects with interactions are relatively easy to construct, but confidence intervals for the MLE estimates quickly involve multiple terms and either the Delta method approximation or bootstrapping to calculate. We will consider this problem from a Bayesian estimation perspective, and calculate point estimates (posterior mean) and credible intervals of the marginal effects. The particular example is Alexseev (2006), which analyzes how changes in the ethnic composition of Russian regions affected the vote share of the extreme Russian nationalist Zhirinovsky Bloc in 2003 Russian State Duma elections.[^alexseev1] alexseev &lt;- read_dta(&quot;data/alexseev.dta&quot;) [alexseev1]: Some of the replication code and material can be found on Matt Golder’s website. One claim of Alexseev (2006) was that support for anti-immigrant parties depends on the percentage of the population of the dominant ethnic group (Slavic) and the change in the percentage the non-dominant share. To test that hypothesis, Alexseev (2006) estimates the following model, \\[ \\begin{multline} \\mathtt{xenovote}_i = \\beta_0 + \\beta_s \\mathtt{slavicshare}_i + \\beta_{n} \\mathtt{changenonslav} + \\\\ \\beta_{sn} (\\mathtt{slavicshare}_i \\times \\mathtt{changenonslav}_i) + \\gamma z_{i} + \\epsilon_{i}, \\end{multline} \\] where \\(z_i\\) is a vector of control variables. xenovote: Xenophobic voting. Share of vote for the Zhironovsky Bloc. slavicshare: Slavic Share. Proportion Slavic in the district. changenonslav: \\(\\Delta\\) non-Slavic Share Change in the proprotion of non-Slavic groups in the region. The model was estimated by OLS,2 mod_f &lt;- (xenovote ~ slavicshare * changenonslav + inc9903 + eduhi02 + unemp02 + apt9200 + vsall03 + brdcont) lm(mod_f, data = alexseev) #&gt; #&gt; Call: #&gt; lm(formula = mod_f, data = alexseev) #&gt; #&gt; Coefficients: #&gt; (Intercept) slavicshare #&gt; 8.942878 0.031486 #&gt; changenonslav inc9903 #&gt; -0.851108 0.000234 #&gt; eduhi02 unemp02 #&gt; -0.039512 1.432013 #&gt; apt9200 vsall03 #&gt; 0.030125 0.661163 #&gt; brdcont slavicshare:changenonslav #&gt; 2.103688 0.008226 Use the lm_preprocess function in the rubbish package to turn the model formula into a list with relevant data. mod_data &lt;- lm_preprocess(mod_f, data = alexseev)[c(&quot;X&quot;, &quot;y&quot;)] mod_data &lt;- within(mod_data, { n &lt;- nrow(X) k &lt;- ncol(X) M &lt;- 100 changenonslav &lt;- seq(min(X[ , &quot;changenonslav&quot;]), max(X[ , &quot;changenonslav&quot;]), length.out = M) idx_b_slavicshare &lt;- which(colnames(X) == &quot;slavicshare&quot;) idx_b_slavicshare_changenonslav &lt;- which(colnames(X) == &quot;slavicshare:changenonslav&quot;) b_loc &lt;- 0 # data appropriate prior b_scale &lt;- max(apply(X, 2, sd)) * 3 sigma_scale &lt;- sd(y) }) The function rstan extracts parameters from the rstan object as a list with an element for each parameter. dydx_all &lt;- rstan::extract(mod_fit, pars = &quot;dydx&quot;)$dydx To make it easier to use with ggplot, convert it to a data frame with columns .id (number), changeonslav (original value of changeonslav passed to the sampler), and value (the value of the marginal effect). dydx_all &lt;- dydx_all %&gt;% as.tibble() %&gt;% mutate(.iter = row_number()) %&gt;% gather(.id, value, -.iter) %&gt;% # merge with original values of changenonslav left_join(tibble(.id = paste0(&quot;V&quot;, seq_along(mod_data$changenonslav)), changenonslav = mod_data$changenonslav), by = &quot;.id&quot;) Since values for a marginal effect line is generated for each iteration, the posterior distribution of \\(\\partial E(\\mathtt{xenovote}|.) / \\partial slavicshare\\) can be plotted as lines. Since the number of lines would be too many to display effectively, plot 256 of them: dydx_all %&gt;% filter(.iter %in% sample(unique(.iter), 2 ^ 8)) %&gt;% ggplot(aes(x = changenonslav, y = value, group = .iter)) + geom_line(alpha = 0.3) + ylab(&quot;Marginal effect of slavic share&quot;) + xlab(paste(expression(Delta, &quot;non-Slavic Share&quot;))) Alternatively, we can summarize the posterior distribution of the marginal effects with a line (posterior mean) and credible interval regions (50%, 90%): dydx_summary &lt;- dydx_all %&gt;% group_by(changenonslav) %&gt;% summarise(mean = mean(value), q5 = quantile(value, 0.05), q25 = quantile(value, 0.25), q75 = quantile(value, 0.75), q95 = quantile(value, 0.95)) ggplot() + modelr::geom_ref_line(h = 0) + geom_ribbon(data = dydx_summary, mapping = aes(x = changenonslav, ymin = q5, ymax = q95), alpha = 0.2) + geom_ribbon(data = dydx_summary, mapping = aes(x = changenonslav, ymin = q25, ymax = q75), alpha = 0.2) + geom_line(data = dydx_summary, mapping = aes(x = changenonslav, y = mean), colour = &quot;blue&quot;) + geom_rug(data = alexseev, mapping = aes(x = changenonslav), sides = &quot;b&quot;) + ylab(&quot;Marginal effect of slavic share&quot;) + xlab(expression(paste(Delta, &quot;non-Slavic Share&quot;))) The plot above also includes a rug with the observed values of changenonslav in the sample. Q: For each value of changenonslav, what is the probability that the marginal effect of slavicshare is greater than 0? Q: Reestimate the model, but calculate the marginal effect of slavicshare for all observed values of changenonslav in the sample. For each observation, calculate the probability that the marginal effect is greater than 0. What proporation of observations is the probability that the marginal effect is greater than zero. Q: Suppose you want to calculate the expected probability that the marginal effect of slavicshare is greater than zero in the sample. Let \\(\\theta^{S}_i\\) be the parameter for the marginal effect of slavicshare on the xenovote. Consider these two calculations: \\[ \\frac{1}{N} \\sum_{i = 1}^n \\left( \\frac{1}{S} \\sum_{s = 1}^S I(\\theta^{(s)}_i &gt; 0) \\right) \\] and \\[ \\frac{1}{S} \\sum_{s = 1}^S \\left( \\frac{1}{N} \\sum_{i = 1}^N I(\\theta^{(s)}_i &gt; 0) \\right) . \\] Are they the same? What are their substantive interpretations? Q: Construct the same plot but for Figure 5(b) in Berry, Golder, and Milton (2012), which displays the marginaleffects of \\(\\Delta\\) non-Slavic on Xenophobic voting. The original model used cluster robust standard errors, which will be ignored for now.↩ "],
["model-checking.html", "5 Model Checking 5.1 Why check models? 5.2 Posterior Predictive Checks 5.3 Sources", " 5 Model Checking 5.1 Why check models? In theory—Bayesian model should include all relevant substantive knowledge and subsume all possible theories. In practice—It won’t. Need to check how the model fits data. The question is not whether a model is “true”; it isn’t (Box 1976). But is it good enough for the purposes of the analysis. See Gelman, Meng, and Stern (1996), Gelman (2007), Gelman (2009), Gelman et al. (2013 Ch. 6), Gelman and Shalizi (2012b), Kruschke (2013), Gelman and Shalizi (2012a), Gelman (2014) for more discussion of the motivation and use of posterior predictive checks. 5.2 Posterior Predictive Checks One way to evaluate the fit of a model is posterior predictive checks Fit the model to the data to get the posterior distribution of the parameters: \\(p(\\theta | D)\\) Simulate data from the fitted model: \\(p(\\tilde{D} | \\theta, D)\\) Compare the simulated data (or a statistic thereof) to the observed data and a statistic thereof. The comparison between data simulated from the model can be formal or visual. Within a Stan function, this is done in the generated quantities block using a _rng distribution functions: generated quantities { vector[n] yrep; for (i in 1:n) { yrep[i] ~ } } The package bayesplot includes multiple functions for posterior predictive checks; see the help for PPC-overview for a summary of these functions. 5.2.1 Bayesian p-values A posterior predictive p-value is a the tail posterior probability for a statistic generated from the model compared to the statistic observed in the data. Let \\(y = (y_1, \\dots, y_n)\\) be the observed data. Suppose the model has been fit and there is a set of simulation \\(\\theta^(s)\\), \\(s = 1, \\dots, n_sims\\). In replicated dataset, \\(y^{rep(s)\\), has been generated from the predictive distribution of the data, \\(p(y^{(rep)} | \\theta = \\theta^{(s)}\\). Then the ensemble of simulated datasets, \\((y^{rep(s)}, \\dots, y^{rep(nsims)})\\), is a sample from the posterior predictive distribution, \\(p(y^{(rep)} | y)\\) The model can be tested by means of discrepancy statistics, which are some function of the data and parameters, \\(T(y, \\theta)\\). If \\(\\theta\\) was known, then compare discrepancy by \\(T(y^{(rep)}, \\theta)\\). The statistical significance is \\(p = \\Pr(T(y^{(rep)}, \\theta) &gt; T(y, \\theta) | y, \\theta)\\). If \\(\\theta\\) is unknown, then average over the posterior distribution of \\(\\theta\\), \\[ \\begin{aligned}[t] p &amp;= \\Pr(T(y^{(rep)}, \\theta) &gt; T(y, \\theta) | y) \\\\ &amp;= \\int Pr(T(y^{(rep)}, \\theta) &gt; T(y, \\theta) | y, \\theta) p(\\theta | y) d\\,\\theta , \\end{aligned} \\] which is easily estimated from the MCMC samples as, \\[ p = \\frac{1}{n_{sims}}\\sum_{s = 1}^{n_{sims}} 1( T(y^{rep(s)}, \\theta(s)) &gt; T(y, \\theta(s))) \\] 5.2.2 Test quantities The definition of a posterior p-value does not specify a particular test-statistic, \\(T\\), to use. The best advice is that \\(T\\) depends on the application. Gelman et al. (2013, 146) Speed of light example uses the 90% interval (61st and 6th order statistics). Gelman et al. (2013, 147) binomial trial example uses the number of swicthes (0 to 1, or 1 to 0) in order to test independence. Gelman et al. (2013, 148) hierarchical model for adolesce smoking uses percent of adolescents in the sample who never smoked percentage in the sample who smoked in all waves precentage of “incident smoker”: adolescents who began the study and non-smokers and ended as smokers. 5.2.3 p-values vs. u-values A posterior predictive p-value is different than a classical p-value. Posterior predictive p-value distributed uniform if the model is true Classical p-value distributed uniform if the null hypothesis (\\(H_0\\)) is true A u-value is any function of the data that has a \\(U(0, 1)\\) sampling distribution (Gelman et al. 2013, 151) a u-value can be averaged over \\(\\theta\\), but it is not Bayesian, and is not a probability distribution posterior p-value: probability statement, conditional on model and data, about future observations 5.2.4 Marginal predictive checks Compare statistics for each observation. Conditional Predictive Ordinate (CPO): The CPO (Gelfand 1996) is the leave-on-out cross-validation predictive density: \\[ p(y_i | y_{-i}) = \\int p(y_i | \\theta) p(\\theta | y_{-i}) d\\,\\theta \\] The pointwise predicted LOO probabilities can be calculated using PSIS-LOO or WAIC in the loo package. Predictive Concordance and Predictive QuantilesP Gelfand (1996) classifies any \\(y_i\\) that is outside the central 95% predictive posterior of \\(y^{rep}_i\\) is an outlier. Let the predictive quantile (\\(PQ_i\\)) be \\[ PQ_i = p(y_i^{(rep)} &gt; y_i) . \\] Then the predictive concordance be the proportion of \\(y_i\\) that are not outliers. Gelfand (1996) argues that the predictive concordance should match 95% - in other words that the posterior predictive distribution should have the correct coverage. (Laplace Demon p. 20) 5.2.5 Outliers Can be identified by the inverse-CPO. larger than 40 are possible outliers, and those higher than 70 are extreme values (Ntzoufras 2009, p. 376). Congdon (2005) scales CPO by dividing each by its individual max and considers observations with scaled CPO under 0.01 as outliers. 5.2.6 Grapical Posterior Predictive Checks Visualization can surprise you, but it doesn’t scale well. Modeling scales well, but it can’t surprise you. – paraphrase of Hadley Hickham Instead of calculating posterior probabilities, plot simulated data and observed data and visually compare them. See Gelman et al. (2013, 154). plot simulated data and real data (Gelman et al. 2013, 154). This is similar to ideas in Wickham et al. (2010). plot summary statistics or inferences residual plots Bayesian residuals have a distribution \\(r_i^{(s)} = y_i - \\E(y_i | \\theta^{s})\\) Bayesian resdiual graph plots single realization of the residuals, or a summary of their posterior distributions binned plots are best for discrete data (Gelman et al. 2013, 157) 5.3 Sources See Gelman and Shalizi (2012b), Gelman and Shalizi (2012a), Kruschke (2013) "],
["introduction-to-stan-and-linear-regression.html", "6 Introduction to Stan and Linear Regression 6.1 Prerequites 6.2 The Statistical Model 6.3 Maximum A Posteriori estimation", " 6 Introduction to Stan and Linear Regression This chapter is an introduction to writing and running a Stan model in R. Also see the rstan vignette for similar content. 6.1 Prerequites For this section we will use the duncan dataset included in the car package. Duncan’s occupational prestige data is an example dataset used throughout the popular Fox regression text, Applied Regression Analysis and Generalized Linear Models (Fox 2016). It is originally from Duncan (1961) consists of survey data on the prestige of occupations in the US in 1950, and several predictors: type of occupation, income, and education of that data(&quot;Duncan&quot;, package = &quot;car&quot;) 6.2 The Statistical Model The first step in running a Stan model is defining the Bayesian statistical model that will be used for inference. Let’s run the regression of occupational prestige on the type of occupation, income, and education: \\[ \\begin{multline} y_i = \\beta_0 + \\beta_1 I(\\mathtt{type} = \\mathtt{&quot;prof&quot;}) + \\beta_2 I(\\mathtt{type} = \\mathtt{&quot;wc&quot;}) \\\\ + \\beta_3 \\mathtt{income} + \\beta_4 \\mathtt{education} + \\epsilon_i \\end{multline} \\] duncan_lm &lt;- lm(prestige ~ type + income + education, data = Duncan) duncan_lm #&gt; #&gt; Call: #&gt; lm(formula = prestige ~ type + income + education, data = Duncan) #&gt; #&gt; Coefficients: #&gt; (Intercept) typeprof typewc income education #&gt; -0.185 16.658 -14.661 0.598 0.345 There are \\(n = 45\\) observations in the dataset. Let \\(y\\) be a \\(n \\times 1\\) vector of the values of prestige. Let \\(X\\) be the \\(n \\times k\\) design matrix of the regression. In this case, \\(k = 5\\), \\[ X = \\begin{bmatrix} 1 &amp; \\mathtt{typeprof} &amp; \\mathtt{typewc} &amp; \\mathtt{income} &amp; \\mathtt{education} \\end{bmatrix} \\] In OLS, we get the frequentist estimates of \\(\\hat{\\beta}\\) by minimizing the squared errors, \\[ \\hat{\\beta}_{OLS} = \\argmin_{\\beta} \\sum_{i = 1}^n (y_i - \\beta&#39; x_i)^2 = \\argmin \\sum_{i = 1}^n \\hat{\\epsilon}_i \\] For valid inference we need to make assumptions about \\(\\epsilon_i\\), namely that they are uncorrelated with \\(X\\), \\(\\Cov(\\epsilon, X) = 0\\), and that they are i.i.d, \\(\\Cov(\\epsilon_i, \\epsilon_j) = 0\\), \\(\\Var(\\epsilon_i) = \\sigma^2\\) for all \\(i\\). However, no specific distributional form is or needs to be assumed for \\(\\epsilon\\) since CLT results show that, asymptotically, the sampling distribution of \\(\\beta\\) is distributed normal. Additionally, although \\(\\hat\\sigma^2 = \\sum_{i = 1}^n \\epsilon_i / (n - k - 1)\\) is a estimator of \\(\\sigma^2\\), standard errors of the standard error of the regression are not directly provided. In Bayesian inference, our target is the posterior distribution of the parameters, \\(\\beta\\) and \\(\\sigma\\): \\(p(\\beta, \\sigma^2 | y, X)\\). Since all uncertainty in Bayesian inference is provided via probability, we will need to explicitly provide parametric distributions for the likelihood and parameters. \\[ p(\\beta, \\sigma | y, X) \\propto p(y | \\beta, \\sigma) p(\\beta, \\sigma) \\] For a Bayesian linear regression model, we’ll need to specify distributions for \\(p(y | \\beta, \\sigma)\\) and \\(p(\\beta, \\sigma)\\). Likelihood: \\(p(y_i | x_i, \\beta, \\sigma)\\) suppose that the observations are distributed independent normal: \\[ y_i \\sim N(\\beta&#39;x_i, \\sigma^2) \\] Priors: The model needs to specify a prior distribution for the parameters \\((\\beta, \\sigma)\\). Rather than specify a single distribution for \\(\\beta\\) and \\(\\sigma\\), it will be easier to specify independent (separate) distributions for \\(\\beta\\) and \\(\\sigma\\). The Stan manual and … provide For the normal distribution, assume i.i.d. normal distributions for each element of \\(\\beta\\): \\[ \\beta_k \\sim N(b, s) \\] For the scale parameter of the normal distribution, \\(\\sigma\\), we will use a half-Cauchy. The Cauchy distribution is a special case of the Student t distribution when the degrees of freedom is 1. In Bayesian stats, it has the property that it concentrates probability mass around its median (zero), but has very wide tails, so if the prior distribution guess is wrong, the parameter can still adapt to data. A half-Cauchy distribution is a Cauchy distribution but with support of \\((0, \\infty)\\) instead of the entire real line. \\[ \\sigma \\sim C^{+}(0, w) \\] Combining all the previous equations, our statistical model for linear regression is, \\[ \\begin{aligned}[t] y &amp;\\sim N(\\mu, \\sigma) \\\\ \\mu &amp;= X \\beta \\\\ \\beta &amp;\\sim N(b, s) \\\\ \\sigma &amp;\\sim C^{+}(0, w) \\end{aligned} \\] This defines a Bayesian model gives us \\[ p(\\beta, \\sigma | y, X, b, s, w) \\propto p(y | X, \\beta) p(\\beta | b, s) p(\\sigma | w) \\] The targets of inference in this model are the two parameters: \\(\\beta\\) (regression coefficients), and \\(\\sigma\\) (standard deviation of the regression). This is conditional on the observed or assumed quantities, which including both the data \\(y\\) (response) and \\(X\\) (predictors), as well the values defining the prior distributions: \\(b\\), \\(s\\), and \\(w\\). Now that we’ve defined a statistical model, we can write it as a Stan model. Stan models are written in its own domain-specific language that focuses on declaring the statistical model (parameters, variables, distributions) while leaving the details of the sampling algorithm to Stan. A Stan model consists of blocks which contain declarations of variables and/or statements. Each block has a specific purpose in the model. functions { // OPTIONAL: user-defined functions } data { // read in data ... } transformed data { // Create new variables/auxiliary variables from the data } parameters { // Declare parameters that will be estimated } transformed parameters { // Create new variables/auxiliary variables from the parameters } model { // Declare your probability model: priors, hyperpriors &amp; likelihood } generated quantities { // Declare any quantities other than simulated parameters to be generated } The file lm.stan is a Stan model for the linear regression model previously defined. data { // number of observations int n; // response vector vector[n] y; // number of columns in the design matrix X int k; // design matrix X matrix [n, k] X; // beta prior real b_loc; real&lt;lower = 0.0&gt; b_scale; // sigma prior real sigma_scale; } parameters { // regression coefficient vector vector[k] b; // scale of the regression errors real&lt;lower = 0.0&gt; sigma; } transformed parameters { // mu is the observation fitted/predicted value // also called yhat vector[n] mu; mu = a + X * b; } model { // priors b ~ normal(b_loc, b_scale); sigma ~ cauchy(0, sigma_scale); // likelihood y ~ normal(mu, sigma); } generated quantities { // simulate data from the posterior vector[n] y_rep; for (i in 1:n) { y_rep[i] = normal_rng(mu[i], sigma); } } mod1 &lt;- stan_model(&quot;stan/lm.stan&quot;) See the Stan Modeling Language User’s Guide and Reference Manual for details of the Stan Language. NoteSince a Stan model compiles to C++ code, you may receive some warning messages such as /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core/set_zero_all_adjoints.hpp:14:17: warning: unused function &#39;set_zero_all_adjoints&#39; [-Wunused-function] static void set_zero_all_adjoints() { ^ In file included from file1d4a4d50faa.cpp:8: In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/src/stan/model/model_header.hpp:4: As long as your model compiles, you can ignore these compiler warnings (On the other hard, warnings that occur during sampling should not be ignored). If the Stan model does not give you a syntax error when parsing the model, it should compile to valid C++.[^bugs][^c-warnings] See [bugs]: In the rare case that the Stan parser transpiles the Stan model to C++ but cannot compile the C++ code, it is a bug in Stan. Follow the instructions on how to inform the Stan developers about bugs. [c-warnings]: The extended installation instructions for MacOS/Linux and Windows have instructions for adding compiler options to the R Makevars file. 6.2.1 Sampling In order to sample from the model, we need to at least give it the values for the data to use: n, k, y, X, and the data associated with the priors. mod1_data &lt;- list( y = Duncan$prestige, n = nrow(Duncan) ) The data types in Stan are all numeric (either integers or reals), but they include matrices and vectors. However, there is nothing like a data frame in Stan. Whereas in the R function lm we can provide a formula and a data set for where to look for objects, and the function will create the appropriate \\(X\\) matrix for the regression, we will need to create that matrix ourselves—expanding categorical variables to indicator variables, and expanding interactions and other functions of the predictors. However, we need to do that all manually. The function stats is the workhorse function used in lm and many other R functions to convert a formula into the matrix used in estimation. X &lt;- model.matrix(prestige ~ type + income + education, data = Duncan) mod1_data$X &lt;- X mod1_data$k &lt;- ncol(X) We still need to provide the values for the prior distributions. For specific values of the prior distributions, assume uninformative priors for beta by setting the mean to zero and the variances to large numbers. \\[ \\beta_k \\sim N(0, 1000) \\] mod1_data$b_loc &lt;- 0 mod1_data$b_scale &lt;- 1000 For prior of the regression scale parameter \\(\\sigma\\), use a half-Cauchy distribution with a large scale parameter, which is a good choice for the priors of scale parameters. \\[ \\sigma \\sim C^{+}(0, 50) \\] mod1_data$sigma_scale &lt;- 50 Now, sample from the posterior, using the function sampling: mod1_fit &lt;- sampling(mod1, data = mod1_data) 6.2.2 Convergence Diagnostics and Model Fit Convergence Diagnostics: Is this the posterior distribution that you were looking for? These don’t directly say anything about how “good” the model is in terms representing the data, they are only evaluating how well the sampler is doing at sampling the posterior distribution of the given model. If there are problems with these, then the sample results do not represent the posterior distribution, and your inferences will be biased. mcse: n_eff: Rhat divergences Model fit: Is this statistical model appropriate for the data? Or better than other models? Posterior predictive checks Information criteria: WAIC Leave-one-out Cross-Validation 6.3 Maximum A Posteriori estimation The Statistical Rethinking text focuses on maximum a posteriori (MAP) estimation. In addition to sampling from the posterior distribution using HMC, the same Stan model can be used to estimate the MAP estimate of the parameters. Use the optimizing function to find the MAP estimates of the model: mod1_fit_opt &lt;- optimizing(mod1, data = mod1_data) #&gt; STAN OPTIMIZATION COMMAND (LBFGS) #&gt; init = random #&gt; save_iterations = 1 #&gt; init_alpha = 0.001 #&gt; tol_obj = 1e-12 #&gt; tol_grad = 1e-08 #&gt; tol_param = 1e-08 #&gt; tol_rel_obj = 10000 #&gt; tol_rel_grad = 1e+07 #&gt; history_size = 5 #&gt; seed = 1425311915 #&gt; initial log joint probability = -546666 #&gt; Error evaluating model log probability: Non-finite gradient. #&gt; Error evaluating model log probability: Non-finite function evaluation. #&gt; Error evaluating model log probability: Non-finite gradient. #&gt; Optimization terminated normally: #&gt; Convergence detected: relative gradient magnitude is below tolerance mod1_fit_opt #&gt; $par #&gt; b[1] b[2] b[3] b[4] b[5] sigma mu[1] #&gt; -0.181 16.480 -14.841 0.597 0.345 9.180 83.218 #&gt; mu[2] mu[3] mu[4] mu[5] mu[6] mu[7] mu[8] #&gt; 85.740 93.057 80.416 84.413 58.030 86.830 98.806 #&gt; mu[9] mu[10] mu[11] mu[12] mu[13] mu[14] mu[15] #&gt; 55.230 89.193 67.125 95.726 95.381 69.980 76.579 #&gt; mu[16] mu[17] mu[18] mu[19] mu[20] mu[21] mu[22] #&gt; 42.308 63.684 71.665 56.767 91.397 27.346 32.829 #&gt; mu[23] mu[24] mu[25] mu[26] mu[27] mu[28] mu[29] #&gt; 42.535 19.750 20.307 41.367 57.883 32.377 20.560 #&gt; mu[30] mu[31] mu[32] mu[33] mu[34] mu[35] mu[36] #&gt; 34.740 18.794 6.418 33.891 11.756 17.545 19.272 #&gt; mu[37] mu[38] mu[39] mu[40] mu[41] mu[42] mu[43] #&gt; 18.356 19.046 11.066 15.780 17.347 18.608 10.907 #&gt; mu[44] mu[45] y_rep[1] y_rep[2] y_rep[3] y_rep[4] y_rep[5] #&gt; 36.361 15.647 94.076 89.496 95.805 82.105 74.688 #&gt; y_rep[6] y_rep[7] y_rep[8] y_rep[9] y_rep[10] y_rep[11] y_rep[12] #&gt; 52.630 77.017 115.110 46.107 91.437 70.361 103.725 #&gt; y_rep[13] y_rep[14] y_rep[15] y_rep[16] y_rep[17] y_rep[18] y_rep[19] #&gt; 95.808 56.171 73.826 49.434 63.228 58.018 36.331 #&gt; y_rep[20] y_rep[21] y_rep[22] y_rep[23] y_rep[24] y_rep[25] y_rep[26] #&gt; 82.678 32.345 47.514 46.091 20.639 14.317 32.379 #&gt; y_rep[27] y_rep[28] y_rep[29] y_rep[30] y_rep[31] y_rep[32] y_rep[33] #&gt; 47.882 28.828 41.644 31.181 14.286 -6.776 37.436 #&gt; y_rep[34] y_rep[35] y_rep[36] y_rep[37] y_rep[38] y_rep[39] y_rep[40] #&gt; 8.027 7.335 21.752 15.772 9.419 4.057 21.350 #&gt; y_rep[41] y_rep[42] y_rep[43] y_rep[44] y_rep[45] #&gt; 29.336 15.381 4.734 45.092 20.127 #&gt; #&gt; $value #&gt; [1] -122 It can also return samples from the multivariate normal (Laplace) approximation to the posterior distribution. Adding the option hessian = TRUE returns the hessian, which is defined on the unconstrained parameter space (all parameters are defined over \\((-\\infty, \\infty)\\)). To get a sample of values from that multivariate normal distribution set draws = TRUE. These draws will be from the unconstrained parameter space, unless constrained = TRUE, in which case they will be on the scales of the original parameters. mod1_fit_opt &lt;- optimizing(mod1, data = mod1_data, hessian = TRUE, constrained = TRUE) #&gt; STAN OPTIMIZATION COMMAND (LBFGS) #&gt; init = random #&gt; save_iterations = 1 #&gt; init_alpha = 0.001 #&gt; tol_obj = 1e-12 #&gt; tol_grad = 1e-08 #&gt; tol_param = 1e-08 #&gt; tol_rel_obj = 10000 #&gt; tol_rel_grad = 1e+07 #&gt; history_size = 5 #&gt; seed = 764155989 #&gt; initial log joint probability = -41463.6 #&gt; Optimization terminated normally: #&gt; Convergence detected: relative gradient magnitude is below tolerance "],
["heteroskedasticity-and-robust-regression.html", "7 Heteroskedasticity and Robust Regression 7.1 Prerequisites 7.2 Linear Regression with Student t distributed errors 7.3 Heteroskedasticity 7.4 References", " 7 Heteroskedasticity and Robust Regression 7.1 Prerequisites VGAM is needed for the Laplace distribution. library(&quot;VGAM&quot;) 7.2 Linear Regression with Student t distributed errors Like OLS, Bayesian linear regression with normally distributed errors is sensitive to outliers. The normal distribution has narrow tail probabilities. This plots the normal, Double Exponential (Laplace), and Student-t (df = 4) distributions all with mean 0 and scale 1, and the surprise (\\(- log(p)\\)) at each point. Higher surprise is a lower log-likelihood. Both the Student-t and Double Exponential distributions have surprise values well below the normal in the ranges (-6, 6).3 This means that outliers impose less of a penalty on the log-posterio models using these distributions, and the regression line would need to move less to incorporate those observations since the error distribution will not consider them as unusual. z &lt;- seq(-6, 6, length.out = 100) bind_rows( tibble(z = z, p = dnorm(z, 0, 1), distr = &quot;Normal&quot;), tibble(z = z, p = dt(z, 4), distr = &quot;Student-t (df = 4)&quot;), tibble(z = z, p = VGAM::dlaplace(z, 0, 1), distr = &quot;Double Exponential&quot;)) %&gt;% mutate(`-log(p)` = -log(p)) %&gt;% ggplot(aes(x = z, y = `-log(p)`, colour = distr)) + geom_line() unionization &lt;- read_tsv(&quot;data/western1995/unionization.tsv&quot;, col_types = cols( country = col_character(), union_density = col_double(), left_government = col_double(), labor_force_size = col_number(), econ_conc = col_double() )) mod_data &lt;- preprocess_lm(union_density ~ left_government + log(labor_force_size) + econ_conc, data = unionization) mod_data &lt;- within(mod_data, { b_loc &lt;- 0 b_scale &lt;- 100 sigma_scale &lt;- sd(y) }) The max_treedepth parameter needed to be increased because in some runs it was hitting the maximum treedepth. This is likely due to the wide tails of the Student t distribution. mod_t_fit &lt;- sampling(mod_t, data = mod_data, control = list(max_treedepth = 11)) #&gt; #&gt; SAMPLING FOR MODEL &#39;rlm&#39; NOW (CHAIN 1). #&gt; #&gt; Gradient evaluation took 3.1e-05 seconds #&gt; 1000 transitions using 10 leapfrog steps per transition would take 0.31 seconds. #&gt; Adjust your expectations accordingly! #&gt; #&gt; #&gt; Iteration: 1 / 2000 [ 0%] (Warmup) #&gt; Iteration: 200 / 2000 [ 10%] (Warmup) #&gt; Iteration: 400 / 2000 [ 20%] (Warmup) #&gt; Iteration: 600 / 2000 [ 30%] (Warmup) #&gt; Iteration: 800 / 2000 [ 40%] (Warmup) #&gt; Iteration: 1000 / 2000 [ 50%] (Warmup) #&gt; Iteration: 1001 / 2000 [ 50%] (Sampling) #&gt; Iteration: 1200 / 2000 [ 60%] (Sampling) #&gt; Iteration: 1400 / 2000 [ 70%] (Sampling) #&gt; Iteration: 1600 / 2000 [ 80%] (Sampling) #&gt; Iteration: 1800 / 2000 [ 90%] (Sampling) #&gt; Iteration: 2000 / 2000 [100%] (Sampling) #&gt; #&gt; Elapsed Time: 0.823236 seconds (Warm-up) #&gt; 0.690373 seconds (Sampling) #&gt; 1.51361 seconds (Total) #&gt; The following numerical problems occurred the indicated number of times on chain 1 #&gt; count #&gt; Exception thrown at line 35: student_t_lpdf: Scale parameter is inf, but must be finite! 1 #&gt; When a numerical problem occurs, the Hamiltonian proposal gets rejected. #&gt; See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected #&gt; If the number in the &#39;count&#39; column is small, there is no need to ask about this message on stan-users. #&gt; #&gt; SAMPLING FOR MODEL &#39;rlm&#39; NOW (CHAIN 2). #&gt; #&gt; Gradient evaluation took 7.3e-05 seconds #&gt; 1000 transitions using 10 leapfrog steps per transition would take 0.73 seconds. #&gt; Adjust your expectations accordingly! #&gt; #&gt; #&gt; Iteration: 1 / 2000 [ 0%] (Warmup) #&gt; Iteration: 200 / 2000 [ 10%] (Warmup) #&gt; Iteration: 400 / 2000 [ 20%] (Warmup) #&gt; Iteration: 600 / 2000 [ 30%] (Warmup) #&gt; Iteration: 800 / 2000 [ 40%] (Warmup) #&gt; Iteration: 1000 / 2000 [ 50%] (Warmup) #&gt; Iteration: 1001 / 2000 [ 50%] (Sampling) #&gt; Iteration: 1200 / 2000 [ 60%] (Sampling) #&gt; Iteration: 1400 / 2000 [ 70%] (Sampling) #&gt; Iteration: 1600 / 2000 [ 80%] (Sampling) #&gt; Iteration: 1800 / 2000 [ 90%] (Sampling) #&gt; Iteration: 2000 / 2000 [100%] (Sampling) #&gt; #&gt; Elapsed Time: 0.767871 seconds (Warm-up) #&gt; 0.762221 seconds (Sampling) #&gt; 1.53009 seconds (Total) #&gt; The following numerical problems occurred the indicated number of times on chain 2 #&gt; count #&gt; Exception thrown at line 35: student_t_lpdf: Scale parameter is inf, but must be finite! 1 #&gt; When a numerical problem occurs, the Hamiltonian proposal gets rejected. #&gt; See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected #&gt; If the number in the &#39;count&#39; column is small, there is no need to ask about this message on stan-users. #&gt; #&gt; SAMPLING FOR MODEL &#39;rlm&#39; NOW (CHAIN 3). #&gt; #&gt; Gradient evaluation took 1.3e-05 seconds #&gt; 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #&gt; Adjust your expectations accordingly! #&gt; #&gt; #&gt; Iteration: 1 / 2000 [ 0%] (Warmup) #&gt; Iteration: 200 / 2000 [ 10%] (Warmup) #&gt; Iteration: 400 / 2000 [ 20%] (Warmup) #&gt; Iteration: 600 / 2000 [ 30%] (Warmup) #&gt; Iteration: 800 / 2000 [ 40%] (Warmup) #&gt; Iteration: 1000 / 2000 [ 50%] (Warmup) #&gt; Iteration: 1001 / 2000 [ 50%] (Sampling) #&gt; Iteration: 1200 / 2000 [ 60%] (Sampling) #&gt; Iteration: 1400 / 2000 [ 70%] (Sampling) #&gt; Iteration: 1600 / 2000 [ 80%] (Sampling) #&gt; Iteration: 1800 / 2000 [ 90%] (Sampling) #&gt; Iteration: 2000 / 2000 [100%] (Sampling) #&gt; #&gt; Elapsed Time: 0.726757 seconds (Warm-up) #&gt; 0.644725 seconds (Sampling) #&gt; 1.37148 seconds (Total) #&gt; The following numerical problems occurred the indicated number of times on chain 3 #&gt; count #&gt; Exception thrown at line 35: student_t_lpdf: Scale parameter is 0, but must be &gt; 0! 1 #&gt; When a numerical problem occurs, the Hamiltonian proposal gets rejected. #&gt; See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected #&gt; If the number in the &#39;count&#39; column is small, there is no need to ask about this message on stan-users. #&gt; #&gt; SAMPLING FOR MODEL &#39;rlm&#39; NOW (CHAIN 4). #&gt; #&gt; Gradient evaluation took 1.2e-05 seconds #&gt; 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #&gt; Adjust your expectations accordingly! #&gt; #&gt; #&gt; Iteration: 1 / 2000 [ 0%] (Warmup) #&gt; Iteration: 200 / 2000 [ 10%] (Warmup) #&gt; Iteration: 400 / 2000 [ 20%] (Warmup) #&gt; Iteration: 600 / 2000 [ 30%] (Warmup) #&gt; Iteration: 800 / 2000 [ 40%] (Warmup) #&gt; Iteration: 1000 / 2000 [ 50%] (Warmup) #&gt; Iteration: 1001 / 2000 [ 50%] (Sampling) #&gt; Iteration: 1200 / 2000 [ 60%] (Sampling) #&gt; Iteration: 1400 / 2000 [ 70%] (Sampling) #&gt; Iteration: 1600 / 2000 [ 80%] (Sampling) #&gt; Iteration: 1800 / 2000 [ 90%] (Sampling) #&gt; Iteration: 2000 / 2000 [100%] (Sampling) #&gt; #&gt; Elapsed Time: 0.846514 seconds (Warm-up) #&gt; 0.75485 seconds (Sampling) #&gt; 1.60136 seconds (Total) #&gt; The following numerical problems occurred the indicated number of times on chain 4 #&gt; count #&gt; Exception thrown at line 35: student_t_lpdf: Scale parameter is inf, but must be finite! 1 #&gt; When a numerical problem occurs, the Hamiltonian proposal gets rejected. #&gt; See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected #&gt; If the number in the &#39;count&#39; column is small, there is no need to ask about this message on stan-users. summary(mod_t_fit, pars = c(&quot;nu&quot;, &quot;sigma&quot;, &quot;b&quot;))$summary #&gt; mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff #&gt; nu 21.699 0.24416 14.3626 3.599 11.279 18.431 28.918 57.369 3460 #&gt; sigma 10.441 0.04339 2.0681 7.059 9.015 10.166 11.610 15.230 2272 #&gt; b[1] 66.279 1.47339 53.0047 -43.640 32.578 67.960 102.590 166.056 1294 #&gt; b[2] 0.274 0.00149 0.0806 0.114 0.223 0.275 0.326 0.432 2914 #&gt; b[3] -4.494 0.09324 3.4316 -11.013 -6.858 -4.598 -2.252 2.676 1354 #&gt; b[4] 10.789 0.50310 18.3043 -23.366 -2.307 10.319 22.500 48.544 1324 #&gt; Rhat #&gt; nu 1.000 #&gt; sigma 1.001 #&gt; b[1] 1.002 #&gt; b[2] 0.999 #&gt; b[3] 1.002 #&gt; b[4] 1.002 Compare those results when using a model with summary(mod_normal_fit, pars = c(&quot;b&quot;, &quot;sigma&quot;))$summary #&gt; mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff #&gt; b[1] 72.930 1.5774 52.9423 -32.488 38.804 72.844 108.590 175.722 1127 #&gt; b[2] 0.269 0.0019 0.0813 0.105 0.217 0.268 0.321 0.431 1835 #&gt; b[3] -4.859 0.1048 3.5445 -11.707 -7.235 -4.898 -2.621 2.184 1143 #&gt; b[4] 8.368 0.5112 17.6960 -25.508 -3.307 8.001 20.290 43.378 1198 #&gt; sigma 11.070 0.0621 2.1395 7.879 9.582 10.739 12.195 16.245 1188 #&gt; Rhat #&gt; b[1] 1 #&gt; b[2] 1 #&gt; b[3] 1 #&gt; b[4] 1 #&gt; sigma 1 Alternatively, the Double Exponential (Laplace) distribution can be used for the errors. This is the equivalent to least quantile regression, where the regression line is the median (50% quantile) mod_dbl_exp &lt;- stan_model(&quot;stan/lms.stan&quot;) #&gt; In file included from fileccc7793fb246.cpp:8: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/src/stan/model/model_header.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/mat.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core.hpp:12: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core/gevv_vvv_vari.hpp:5: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core/var.hpp:7: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/math/tools/config.hpp:13: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/config.hpp:39: #&gt; /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/config/compiler/clang.hpp:196:11: warning: &#39;BOOST_NO_CXX11_RVALUE_REFERENCES&#39; macro redefined [-Wmacro-redefined] #&gt; # define BOOST_NO_CXX11_RVALUE_REFERENCES #&gt; ^ #&gt; &lt;command line&gt;:6:9: note: previous definition is here #&gt; #define BOOST_NO_CXX11_RVALUE_REFERENCES 1 #&gt; ^ #&gt; In file included from fileccc7793fb246.cpp:8: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/src/stan/model/model_header.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/mat.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core.hpp:42: #&gt; /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core/set_zero_all_adjoints.hpp:14:17: warning: unused function &#39;set_zero_all_adjoints&#39; [-Wunused-function] #&gt; static void set_zero_all_adjoints() { #&gt; ^ #&gt; In file included from fileccc7793fb246.cpp:8: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/src/stan/model/model_header.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/mat.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core.hpp:43: #&gt; /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/core/set_zero_all_adjoints_nested.hpp:17:17: warning: &#39;static&#39; function &#39;set_zero_all_adjoints_nested&#39; declared in header file should be declared &#39;static inline&#39; [-Wunneeded-internal-declaration] #&gt; static void set_zero_all_adjoints_nested() { #&gt; ^ #&gt; In file included from fileccc7793fb246.cpp:8: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/src/stan/model/model_header.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/mat.hpp:11: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/prim/mat.hpp:59: #&gt; /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/prim/mat/fun/autocorrelation.hpp:17:14: warning: function &#39;fft_next_good_size&#39; is not needed and will not be emitted [-Wunneeded-internal-declaration] #&gt; size_t fft_next_good_size(size_t N) { #&gt; ^ #&gt; In file included from fileccc7793fb246.cpp:8: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/src/stan/model/model_header.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math.hpp:4: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/rev/mat.hpp:11: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/prim/mat.hpp:298: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/prim/arr.hpp:39: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/StanHeaders/include/stan/math/prim/arr/functor/integrate_ode_rk45.hpp:13: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/numeric/odeint.hpp:61: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/numeric/odeint/util/multi_array_adaption.hpp:29: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/multi_array.hpp:21: #&gt; In file included from /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/multi_array/base.hpp:28: #&gt; /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/multi_array/concept_checks.hpp:42:43: warning: unused typedef &#39;index_range&#39; [-Wunused-local-typedef] #&gt; typedef typename Array::index_range index_range; #&gt; ^ #&gt; /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/multi_array/concept_checks.hpp:43:37: warning: unused typedef &#39;index&#39; [-Wunused-local-typedef] #&gt; typedef typename Array::index index; #&gt; ^ #&gt; /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/multi_array/concept_checks.hpp:53:43: warning: unused typedef &#39;index_range&#39; [-Wunused-local-typedef] #&gt; typedef typename Array::index_range index_range; #&gt; ^ #&gt; /Library/Frameworks/R.framework/Versions/3.3/Resources/library/BH/include/boost/multi_array/concept_checks.hpp:54:37: warning: unused typedef &#39;index&#39; [-Wunused-local-typedef] #&gt; typedef typename Array::index index; #&gt; ^ #&gt; 8 warnings generated. mod_dbl_exp_fit &lt;- sampling(mod_dbl_exp, data = mod_data) #&gt; #&gt; SAMPLING FOR MODEL &#39;lms&#39; NOW (CHAIN 1). #&gt; #&gt; Gradient evaluation took 2.9e-05 seconds #&gt; 1000 transitions using 10 leapfrog steps per transition would take 0.29 seconds. #&gt; Adjust your expectations accordingly! #&gt; #&gt; #&gt; Iteration: 1 / 2000 [ 0%] (Warmup) #&gt; Iteration: 200 / 2000 [ 10%] (Warmup) #&gt; Iteration: 400 / 2000 [ 20%] (Warmup) #&gt; Iteration: 600 / 2000 [ 30%] (Warmup) #&gt; Iteration: 800 / 2000 [ 40%] (Warmup) #&gt; Iteration: 1000 / 2000 [ 50%] (Warmup) #&gt; Iteration: 1001 / 2000 [ 50%] (Sampling) #&gt; Iteration: 1200 / 2000 [ 60%] (Sampling) #&gt; Iteration: 1400 / 2000 [ 70%] (Sampling) #&gt; Iteration: 1600 / 2000 [ 80%] (Sampling) #&gt; Iteration: 1800 / 2000 [ 90%] (Sampling) #&gt; Iteration: 2000 / 2000 [100%] (Sampling) #&gt; #&gt; Elapsed Time: 0.987327 seconds (Warm-up) #&gt; 0.769289 seconds (Sampling) #&gt; 1.75662 seconds (Total) #&gt; The following numerical problems occurred the indicated number of times on chain 1 #&gt; count #&gt; Exception thrown at line 33: double_exponential_lpdf: Scale parameter is inf, but must be finite! 5 #&gt; When a numerical problem occurs, the Hamiltonian proposal gets rejected. #&gt; See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected #&gt; If the number in the &#39;count&#39; column is small, there is no need to ask about this message on stan-users. #&gt; #&gt; SAMPLING FOR MODEL &#39;lms&#39; NOW (CHAIN 2). #&gt; #&gt; Gradient evaluation took 1.2e-05 seconds #&gt; 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. #&gt; Adjust your expectations accordingly! #&gt; #&gt; #&gt; Iteration: 1 / 2000 [ 0%] (Warmup) #&gt; Iteration: 200 / 2000 [ 10%] (Warmup) #&gt; Iteration: 400 / 2000 [ 20%] (Warmup) #&gt; Iteration: 600 / 2000 [ 30%] (Warmup) #&gt; Iteration: 800 / 2000 [ 40%] (Warmup) #&gt; Iteration: 1000 / 2000 [ 50%] (Warmup) #&gt; Iteration: 1001 / 2000 [ 50%] (Sampling) #&gt; Iteration: 1200 / 2000 [ 60%] (Sampling) #&gt; Iteration: 1400 / 2000 [ 70%] (Sampling) #&gt; Iteration: 1600 / 2000 [ 80%] (Sampling) #&gt; Iteration: 1800 / 2000 [ 90%] (Sampling) #&gt; Iteration: 2000 / 2000 [100%] (Sampling) #&gt; #&gt; Elapsed Time: 0.876012 seconds (Warm-up) #&gt; 0.906962 seconds (Sampling) #&gt; 1.78297 seconds (Total) #&gt; The following numerical problems occurred the indicated number of times on chain 2 #&gt; count #&gt; Exception thrown at line 33: double_exponential_lpdf: Scale parameter is inf, but must be finite! 3 #&gt; When a numerical problem occurs, the Hamiltonian proposal gets rejected. #&gt; See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected #&gt; If the number in the &#39;count&#39; column is small, there is no need to ask about this message on stan-users. #&gt; #&gt; SAMPLING FOR MODEL &#39;lms&#39; NOW (CHAIN 3). #&gt; #&gt; Gradient evaluation took 1.4e-05 seconds #&gt; 1000 transitions using 10 leapfrog steps per transition would take 0.14 seconds. #&gt; Adjust your expectations accordingly! #&gt; #&gt; #&gt; Iteration: 1 / 2000 [ 0%] (Warmup) #&gt; Iteration: 200 / 2000 [ 10%] (Warmup) #&gt; Iteration: 400 / 2000 [ 20%] (Warmup) #&gt; Iteration: 600 / 2000 [ 30%] (Warmup) #&gt; Iteration: 800 / 2000 [ 40%] (Warmup) #&gt; Iteration: 1000 / 2000 [ 50%] (Warmup) #&gt; Iteration: 1001 / 2000 [ 50%] (Sampling) #&gt; Iteration: 1200 / 2000 [ 60%] (Sampling) #&gt; Iteration: 1400 / 2000 [ 70%] (Sampling) #&gt; Iteration: 1600 / 2000 [ 80%] (Sampling) #&gt; Iteration: 1800 / 2000 [ 90%] (Sampling) #&gt; Iteration: 2000 / 2000 [100%] (Sampling) #&gt; #&gt; Elapsed Time: 1.08135 seconds (Warm-up) #&gt; 1.11122 seconds (Sampling) #&gt; 2.19257 seconds (Total) #&gt; The following numerical problems occurred the indicated number of times on chain 3 #&gt; count #&gt; Exception thrown at line 33: double_exponential_lpdf: Scale parameter is inf, but must be finite! 1 #&gt; When a numerical problem occurs, the Hamiltonian proposal gets rejected. #&gt; See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected #&gt; If the number in the &#39;count&#39; column is small, there is no need to ask about this message on stan-users. #&gt; #&gt; SAMPLING FOR MODEL &#39;lms&#39; NOW (CHAIN 4). #&gt; #&gt; Gradient evaluation took 1.1e-05 seconds #&gt; 1000 transitions using 10 leapfrog steps per transition would take 0.11 seconds. #&gt; Adjust your expectations accordingly! #&gt; #&gt; #&gt; Iteration: 1 / 2000 [ 0%] (Warmup) #&gt; Iteration: 200 / 2000 [ 10%] (Warmup) #&gt; Iteration: 400 / 2000 [ 20%] (Warmup) #&gt; Iteration: 600 / 2000 [ 30%] (Warmup) #&gt; Iteration: 800 / 2000 [ 40%] (Warmup) #&gt; Iteration: 1000 / 2000 [ 50%] (Warmup) #&gt; Iteration: 1001 / 2000 [ 50%] (Sampling) #&gt; Iteration: 1200 / 2000 [ 60%] (Sampling) #&gt; Iteration: 1400 / 2000 [ 70%] (Sampling) #&gt; Iteration: 1600 / 2000 [ 80%] (Sampling) #&gt; Iteration: 1800 / 2000 [ 90%] (Sampling) #&gt; Iteration: 2000 / 2000 [100%] (Sampling) #&gt; #&gt; Elapsed Time: 1.01907 seconds (Warm-up) #&gt; 0.84409 seconds (Sampling) #&gt; 1.86316 seconds (Total) #&gt; The following numerical problems occurred the indicated number of times on chain 4 #&gt; count #&gt; Exception thrown at line 33: double_exponential_lpdf: Scale parameter is inf, but must be finite! 1 #&gt; When a numerical problem occurs, the Hamiltonian proposal gets rejected. #&gt; See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected #&gt; If the number in the &#39;count&#39; column is small, there is no need to ask about this message on stan-users. summary(mod_dbl_exp_fit, par = c(&quot;b&quot;, &quot;sigma&quot;))$summary #&gt; mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff #&gt; b[1] 38.693 1.90247 51.2313 -60.417 5.004 37.97 71.661 140.290 725 #&gt; b[2] 0.298 0.00225 0.0837 0.131 0.245 0.30 0.352 0.458 1387 #&gt; b[3] -2.971 0.11773 3.2419 -9.408 -5.073 -3.01 -0.842 3.242 758 #&gt; b[4] 20.981 0.67250 18.2690 -15.589 9.157 21.53 33.057 56.774 738 #&gt; sigma 9.050 0.06676 2.2260 5.585 7.533 8.75 10.209 14.423 1112 #&gt; Rhat #&gt; b[1] 1 #&gt; b[2] 1 #&gt; b[3] 1 #&gt; b[4] 1 #&gt; sigma 1 7.3 Heteroskedasticity In applied regression, heteroskedasticity consistent (HC) or robust standard errors are often used. However, there is straighforwardly direct translation of HC standard error to regression model this in a Bayesian setting. The sandwich method of estimating HC errors uses the same point estimates for the regression coefficients as OLS, but estimates the standard errors of those coefficients in a second stage from the OLS residuals. Disregarding differences in frequentist vs. Bayesian inference, it is clear that a direct translation of that method could not be fully Bayesian since the coefficients and errors are not estimated jointly. In a linear normal regression model with heteroskedasticity, each observation has its own scale parameter, \\(\\sigma_i\\), \\[ \\begin{aligned}[t] y_i &amp;\\sim \\dnorm(X \\beta, \\sigma_i) . \\end{aligned} \\] It should be clear that without proper priors this model is not identified, meaning that the posterior distribution is improper. To estimate this model we have to apply some model to the scale terms, \\(\\sigma_i\\). In fact, you can think of homoskedasticity as the simplest such model; assuming that all \\(\\sigma_i = \\sigma\\). A more general model of \\(\\sigma_i\\) should encode any information the analyst has about the scale terms. This can be a distribution or functions of covariates for how we think observations may have different values. 7.3.1 Covariates A simple model of heteroskedasticity is if the observations can be split into groups. Suppose the observations are partitioned into \\(k = 1, \\dots, K\\) groups, and \\(k[i]\\) is the group of observation \\(i\\), \\[ \\sigma_i = \\sigma_{k[i]} \\] Another choice would be to model the scale term with a regression model, for example, \\[ \\log(\\sigma_i) \\sim \\dnorm(X \\gamma, \\tau) \\] 7.3.2 Student-t It turns out that the Student-t distribution of error terms from the Robust Regression chapter can also be derived as a model of heteroskedasticity. A reparameterization that will be used quite often is to rewrite a normal distributions with unequal scale parameters as a continous mixture of a common global scale parameter (\\(\\sigma\\)), and observation specific local scale parameters, \\(\\lambda_i\\),[^globalmixture] \\[ y_i \\sim \\dnorm(X\\beta, \\lambda_i \\sigma) . \\] If the local scale paramters are distributed as, \\[ \\lamba^2 \\sim \\dinvgamma(\\nu / 2, \\nu / 2) \\] then the above is equivalent to a regression with errors distributed Student-t errors with \\(\\nu\\) degrees of freedom, \\[ y_i \\sim \\dt{\\nu}(X \\beta, \\sigma) . \\] [^globalmixture] See this for a visualization of a Student-t distribution a mixture of Normal distributions, and this for a derivation of the Student t distribution as a mixture of normals. This scale mixture of normals representation will also be used with shrinkage priors on the regression coefficients. Example: Simulate Student-t distribution with \\(\\nu\\) degrees of freedom as a scale mixture of normals. For *s in 1:S$, Simulate \\(z_s \\sim \\dgamma(\\nu / 2, \\nu / 2)\\) \\(x_s = 1 / \\sqrt{z_s}2\\) is draw from \\(\\dt{\\nu}(0, 1)\\). When using R, ensure that you are using the correct parameterization of the gamma distribution. Left to reader 7.4 References 7.4.1 Robust regression See Gelman and Hill (2007 sec 6.6), Gelman et al. (2013 ch 17) Stan Development Team (2016 Sec 8.4) for the Stan example using a Student-t distribution 7.4.2 Heteroskedasticity Gelman et al. (2013 Sec. 14.7) for models with unequal variances and correlations. Stan Development Team (2016) reparameterizes the Student t distribution as a mixture of gamma distributions in Stan. The Double Exponential distribution still has a thinner tail than the Student-t at higher values.↩ "],
["generalized-linear-models.html", "8 Generalized Linear Models 8.1 Generalized Linear Models 8.2 Binomial 8.3 Poisson 8.4 Negative Binomial 8.5 References", " 8 Generalized Linear Models 8.1 Generalized Linear Models Generalized linear models (GLMs) are a class of commonly used models in social science.[^glm-r] A GLM consists of three components In GLMs the mean is specified as a function as a function of a linear model of predictors (e.g. \\(\\mat{X} \\beta)\\)), \\[ E(Y) = \\mu = g^{-1}(\\mat{X} \\vec{\\beta}) \\] A probability distribution (family) for the outcome. This is usually in the exponential family: common examples include: normal, Binomial, Poisson, Categorical, Multinomial, Poison. A linear predictor: \\(\\eta = \\mat{X} \\beta\\) A link function \\(g\\), such that \\(\\E(Y)= \\mu = g^{-1}(\\eta)\\). The link function (\\(g\\)) and its inverse ($g^{-1}) translate \\(\\eta\\) from \\((\\-infty, +\\infty)\\) to the proper range for the probability distribution and back again. These models are often estimated with MLE, as with the function stats. However, these are also easily estimated in a Bayesian setting: See the help for stats for common probaiblity distributions, stats for common links, and the Wikipedia page for a table of common GLMs. See the function VGAM for even more examples of link functions and probability distributions. The link function, \\(g\\), maps the mean or parameter to the linear predictor, \\[ g(\\mu) = \\eta \\] and the inverse link function maps the linear predictor to the mean, \\[ \\mu = g^{-1}(\\eta) \\] 8.2 Binomial The outcomes \\(Y\\) are non-negative integers: \\(0, 1, 2, \\dots, n_i\\). The total number, \\(n_i\\), can vary by observation. Special case: \\(n_i = 1\\) for all \\(i \\in (1, 0)\\): logit, probit models. The outcome is distributed Binomial: \\[ \\begin{aligned}[t] y_i \\sim \\dbinom\\left(n_i, \\pi \\right) \\end{aligned} \\] The parameter \\(\\pi \\in [0, 1]\\) is modeled with a link funcction and a linear predictor. There are several common link functions, but they all have to map \\(R \\to (0, 1)\\).4 Logit: The logistic function, \\[ \\pi_i = \\logistic(x_i\\T \\beta) = \\frac{1}{1 + \\exp(- x_i\\T\\beta)} . \\] Stan function softmax. - Probit: The CDF of the normal distribution. \\[ \\pi_i = \\Phi(x_i\\T \\beta) \\] Stan function normal_cdf. cauchit: The CDF of the Cauchy distribution. Stan function cauchy_cdf. cloglog: The inverse of the conditional log-log function (cloglog) is \\[ \\pi_i = 1 - \\exp(-\\exp(x_i\\T \\beta)) . \\] Stan function inv_cloglog. 8.3 Poisson TODO 8.4 Negative Binomial TODO 8.5 References Texts: Gelman et al. (2013 Ch 16) McElreath (2016 Ch 9) King (1998) discusses MLE estimation of many common GLM models Many econometrics/statisics textbooks, e.g. Fox (2016), discuss GLMs. Though they are not derived from a Bayesian context, they can easily be Since a CDF maps reals to \\((0, 1)\\), any CDF can be used as a link function.↩ "],
["notes.html", "9 Notes 9.1 Syllabi 9.2 Textbooks 9.3 Topics 9.4 Computation Methods 9.5 Model Checking 9.6 General Applications and Models 9.7 Hierarchical Modeling 9.8 Shrinkage/Regularization 9.9 Bayes Theorem Examples 9.10 Good-Turing Estimator 9.11 Reproducibility 9.12 Empirical Bayes 9.13 Things to cover", " 9 Notes 9.1 Syllabi Ryan Bakker and Johannes Karreth, “Introduction to Applied Bayesian Modeling” ICPSR. Summer 2016. Syllabus code Justin Esarey. “Advanced Topics in Political Methodology: Bayesian Statistics” Winter 2015. Syllabus Lectures Kruschke. Doing Bayesian Data Analysis site Nick Beauchamp. “Bayesian Methods.” NYU syllabus Alex Tanhk. “Bayesian Methods for the Social Sciences” U of Wisconsin. Spring 2017. syllabus MTH225 Statistics for Science Spring 2016 github website Ben Goodrich, “Bayesian Statistics for Social Sciences” Columbia University. Spring 2016. Bakker. “ntroduction to Applied Bayesian Analysis” University of Georgia. syllabus site Myimoto. “Advances in Quantitative Psychology: Bayesian Statistics, Modeling &amp; Reasoning” U of Washington. Winter 2017. site Kruschke. “Bayesian Data Analysis” Indiana University. Spring 2016. PyMC code Blackwell and Spirling. 2002. “Topics in Political Methodology” Harvard. Fall 2014. Syllabus. It has a couple of classes on Bayesian methods. Neil Frazer. Bayesian Data Analysis. Hawaii. Spring 2017. syllabus Lopes. 2016. Bayesian Statistical Learning: Readings in Statistics and Econometrics. http://hedibert.org/current-teaching/ Lopes. 2012 Simulation-based approaches to modern Bayesian econometrics. Short course. Lopes. 2015. Bayesian Econometrics. http://hedibert.org/current-teaching/ 9.2 Textbooks Gelman, Andrew, and Jennifer Hill. 2006. Data Analysis Using Regression and Multilevel/Hierarchical Models. Cambridge University Press. Gelman, Andrew, John B. Carlin, Hal S. Stern, David B. Dunson, Aki Vehtari, and Donald B. Rubin. 2013. Bayesian Data Analysis. 3rd ed. CRC Press. Gelman, Andrew, Jessica Hwang, and Aki Vehtari. 2014. “Understanding Predictive Information Criteria for Bayesian Models.” Statistics and Computing 24 (6). Springer: 997–1016. Gill, Jeff. 2008. Bayesian Methods : A Social and Behavioral Sciences Approach. Second. Boca Raton: Chapman &amp; Hall/CRC. Jackman, Simon. 2009. Bayesian Analysis for the Social Sciences. Chichester, UK: Wiley. Kruschke, John. 2010. Doing Bayesian Data Analysis: A Tutorial Introduction with R. Academic Press. Lynch, Scott M. 2007. Introduction to Applied Bayesian Statistics and Estimation for Social Scientists. New York: Springer. McElreath, Richard. 2016. Statistical Rethinking: A Bayesian Course with Examples in R and Stan. Vol. 122. CRC Press. github page for Statistical Rethinking https://github.com/rmcelreath/rethinking http://xcelab.net/rm/statistical-rethinking/ Lunn, David, Chris Jackson, Nicky Best, Andrew Thomas, and David Spiegelhalter. 2012. The BUGS Book: A Practical Introduction to Bayesian Analysis. Boca Raton, FL: Chapman; Hall/CRC. Suess, Eric A. and Bruce E. Trumbo. 2010. Introduction to Probability Simulation and Gibbs Sampling with R. New York: Springer. Suess, Eric A. and Bruce E. Trumbo. 2010. Introduction to Probability Simulation and Gibbs Sampling with R. New York: Springer. Peter Hoff. 2009. A First Course in Bayesian Statistical Methods Jaynes. 2003. Probability Theory: The Logic of Science. Congdon. 2014. Applied Bayesian Modeling. Wakefield. 2013. Bayesian and Frequentist Regression Methods Casella and Roberts. 2004. Monte Carlo Statistical Methods Marin and Roberts. 2014. Bayesian Essentials with R. http://www.springer.com/us/book/9781461486862 9.3 Topics 9.3.1 Overviews Michael Clarke Bayesian Basics Jackman. 2004. Bayesian Analysis for Political Research. Annual Review of Political Science DOI: 10.1146/annurev.polisci.7.012003.104706 Kruschke, J.K. &amp; Liddell, T.M. Psychon Bull Rev (2017). doi:10.3758/s13423-016-1221-4 - Cumming, G. (2014). The new statistics why and how. Psychological Science, 25(1), 7–29. 9.3.2 Bayesian Philosophy Efron. 2010. The Future of Indirect Evidence. Stat Sci doi:10.1214/09-STS308 Berger. 2006. The case for objective Bayesian analysis. Bayesian Anal doi:10.1214/06-BA115 Brad Efron “Why Isn’t Everyone a Bayesian?” The American Statistician, Vol. 40, No. 1 (Feb., 1986) [include following discussion of Efron’s article] Chernoff. http://dx.doi.org/10.1080/00031305.1986.10475343 Lindley. http://dx.doi.org/10.1080/00031305.1986.10475344 Morris. http://dx.doi.org/10.1080/00031305.1986.10475345 Press. http://dx.doi.org/10.1080/00031305.1986.10475346 Smith. http://dx.doi.org/10.1080/00031305.1986.10475347 Efron. Reply. http://dx.doi.org/10.1080/00031305.1986.10475348 Philosophy and the practice of Bayesian statistics in the social sciences1. tp://www.stat.columbia.edu/~gelman/research/published/philosophy_chapter.pdf Aris Spanos “Revisiting data mining: ‘hunting’ with or without a license” Rubin (1984) Rubin, Bayesianly Justifiable and Relevant Frequency Calculations for the Applied Statistician. Ann. Statist. 12 (1984), no. 4, 1151–1172. doi:10.1214/aos/1176346785. http://projecteuclid.org/euclid.aos/1176346785. Andrew Gelman Induction and Deduction in Bayesian Data Analysis Berger, James O. Could Fisher, Jeffreys and Neyman Have Agreed on Testing?. Statist. Sci. 18 (2003), no. 1, 1–32. doi:10.1214/ss/1056397485. http://projecteuclid.org/euclid.ss/1056397485. Gross2014a: Gross, J. H. (2015), Testing What Matters (If You Must Test at All): A Context-Driven Approach to Substantive and Statistical Significance. American Journal of Political Science, 59: 775–788. doi:10.1111/ajps.12149 Ng. and Jordan. On Discriminative vs. Generative classifiers: A Comparison of logistic regression and Naive Bayes: http://ai.stanford.edu/~ang/papers/nips01-discriminativegenerative.pdf 9.3.3 Bayesian Frequentist Debates Casella and Berger. 1987. Reconciling Bayesian and Frequentist Evidence in the One-Sided Testing Problem. JASA. doi:10.1080/01621459.1987.10478396 Bayesians and Frequentists : Models, Assumptions, and Inference slides Kasss Statitsical Inference: The Big Picture https://arxiv.org/pdf/1106.2895v2.pdf Noah Smith Bayesian vs. Frequentist: Is there any “there” there? Kass Kinds of Bayesians http://www.stat.cmu.edu/~kass/papers/kinds.pdf Anthony O’Hagan. Science, Subjectivity and Software (Comments on the articles by Berger and Goldstein) Good, I.J. (1971) 46656 varieties of Bayesians. Letter in American Statistician, 25: 62– 63. Reprinted in Good Thinking, University of Minnesota Press, 1982, pp. 20–21. 9.3.4 Categorical Agresti. Bayesian Inference for Categorical Data Analysis. http://www.stat.ufl.edu/~aa/cda2/bayes.pdf Perfect Separation Gelman. 2008. “A weakly informative default prior distribution for logistic and other regression models” Ann Applied Stat doi:10.1214/08-AOAS191 Rainey. 2016. “Dealing with Separation in Logistic Regression Models” Political Analysisa Rare Events King and Zheng. 2001. “Explaining Rare Events in International Relations” Int Org https://doi.org/10.1162/00208180152507597 King, Gary, and Langche Zeng. 2001. “Logistic Regression in Rare Events Data.” Political Analysis http://www.jstor.org/stable/25791637. 9.3.5 Identifiability Weschler et al. 2013. A. Bayesian Look at Nonidentifiability: A Simple Example. Am stat http://dx.doi.org/10.1080/00031305.2013.778787 9.3.6 Time Series Park, “Changepoint analysis of binary and ordinal probit models: An application to bank rate policy under the interwar gold standard” 9.3.7 Topic Models Grimmer and Stewart, “Text as data: Te promise and pitfalls of automatic content analysis methods for political texts” Quinn, Monroe, Colaresi, Crespin and Radev, “How to analyze political attention with minimal assumptions and costs” 9.3.8 Nonparametric Bayesian Methods Gill and Casella, “Nonparametric priors for ordinal Bayesian social science models” Spirling and Quinn, “Identifying intraparty voting blocs in the U.K. House of Commons” 9.3.9 Prior Elicitation Gill, J. and Walker, L. D. (2005). Elicited Priors for Bayesian Model Specifications in Political Science Research. Journal of Politics 9.3.10 Variable Selection Ghosh and Ghattas. 2015. Bayesian Variable Selection Under Collinearity. Am Stat http://dx.doi.org/10.1080/00031305.2015.1031827 9.3.11 Shrinkage Efron, B. &amp; Morris, C. 1975. “Data Analysis Using Stein’s Estimator and its Generalizations” JASA doi:10.1080/01621459.1975.10479864 https://baseballwithr.wordpress.com/2016/02/15/revisiting-efron-and-morriss-baseball-study/ 9.3.12 Applied Bayes Rule Mostly examples of naive Bayes 9.4 Computation Methods 9.4.0.1 Animations https://chi-feng.github.io/mcmc-demo/ https://mimno.infosci.cornell.edu/hmc/; http://www.mimno.org/articles/hmc/ http://twiecki.github.io/blog/2014/01/02/visualizing-mcmc/ https://ridlow.wordpress.com/category/animation/ http://people.math.aau.dk/~kkb/Undervisning/Bayes14/sorenh/docs/sampling-notes.pdf https://rpubs.com/mv2521/mcmc-animation http://blog.revolutionanalytics.com/2013/09/an-animated-peek-into-the-workings-of-bayesian-statistics.html https://people.duke.edu/~ccc14/sta-663/Animation.html https://artax.karlin.mff.cuni.cz/r-help/library/asbio/html/anm.mc.bvn.html https://groups.google.com/forum/#!topic/stan-users/nOk80xTlSyE https://www.youtube.com/watch?v=Vv3f0QNWvWQ https://theclevermachine.wordpress.com/2012/11/18/mcmc-hamiltonian-monte-carlo-a-k-a-hybrid-monte-carlo/ https://www.youtube.com/watch?v=pHsuIaPbNbY&amp;list=PLqdbxUnkqOw2nKn7VxYqIrKWcqRkQYOsF&amp;index=11 http://arogozhnikov.github.io/2016/12/19/markov_chain_monte_carlo.html 9.4.0.2 Gibbs Gelfand et. al. 1986. “Illustration of Bayesian Inference in Normal Data Models Using Gibbs Sampling” doi: 10.1080/01621459.1990.10474968 Chib and Greenberg. “Understanding the Metropolis-Hastings Algorithm” doi:10.1080/00031305.1995.10476177 9.4.0.3 MCMC Casella Berger Jackman 2000 Allison and Dunkley. 2013. Comparison of sampling techniques for Bayesian parameter estimation. https://arxiv.org/pdf/1308.2675.pdf https://courses.cs.washington.edu/courses/cse577/04sp/notes/dellaertUW.pdf Geyer. MCMC: Does it work? How can we tell?http://users.stat.umn.edu/~geyer/jsm09.pdf 9.4.0.4 HMCM Neal. 2011. MCMC using Hamiltonian dynamics. https://arxiv.org/pdf/1206.1901.pdf https://www.youtube.com/watch?v=xWQpEAyI5s8&amp;index=12&amp;list=PLqdbxUnkqOw2nKn7VxYqIrKWcqRkQYOsF https://arxiv.org/pdf/1701.02434.pdf http://deeplearning.net/tutorial/hmc.html 9.4.0.5 SMC Liu and Chen. 1998. Sequential Monte Carlo Methods for Dynamic Systems. JASA 10.1080/01621459.1998.10473765 9.4.0.6 Variational Grimmer, “An Introduction to Bayesian Inference via Variational Approximations” Raganath et al. 2015. “Black Box Variational Inference” https://arxiv.org/abs/1401.0118 9.4.0.7 Expectation Propogation Gelman et. al. 2017. “Expectation propagation as a way of life: A framework for Bayesian inference on partitioned data.” https://arxiv.org/pdf/1412.4869.pdf 9.4.0.8 Importance Resampling Smith and Gelfand. 1992. “Bayesian Statistics without Tears: A Sampling–Resampling Perspective” Am Stat 10.1080/00031305.1992.10475856. Gelfand and Smith. “Sampling-Based Approaches to Calculating Marginal Densities” JASA 10.1080/01621459.1990.10476213 Lopes, Hedibert F., Nicholas G. Polson, and Carlos M. Carvalho. “Bayesian Statistics with a Smile: A Resampling-sampling Perspective.” Brazilian Journal of Probability and Statistics http://www.jstor.org/stable/43601224. [Simulation-based approaches to modern Bayesian 9.4.0.9 Approximate Bayesian Marin, Pudlo, Robert and Ryder, “Approximate Bayesian computational methods” 9.4.0.10 Author attribution Mosteller. 1964. Inference in an Authorship Problem. JASA Arefin, A. S.; Vimieiro, R.; Riveros, C.; Craig, H. &amp; Moscato, P. Berwick, R. C. (Ed.) An Information Theoretic Clustering Approach for Unveiling Authorship Affinities in Shakespearean Era Plays and Poems PLoS ONE, Public Library of Science (PLoS), 2014. 10.1371/journal.pone.0111445. Not Bayesian per se, but has the corpus of Shakespeare and other plays. 9.4.1 Software Sofware for general purpose Bayesian computation is called probablistic programming, though the term is used in CS and not so much in stats, or social science. Stan Joseph Rickert. 2016. R Stan and Statistics BUGS modeling language. Models are specified in a different language. NIMBLE A very new BUGS-like lanugage that works with R. JAGS Gibbs/MCMC based WinBUGS Gibbs and MCMC based software. It was one of the first but is now obsolete and unmaintained. Use JAGS or Stan instead. OpenBUGS The continuation of the WinBUGS project. Also no longer well maintained. Use JAGS or Stan instead. R has multiple packages that implement some Bayesian methods. See the Bayesian Task View LearnBayes TeachBayes Python PyMC Very complete general-purpose Python package for Bayesian Analysis The various Machine learning packages like [SciKit] Edward. By David Blei. Deep generative models, variational inference. Runs on Tensorflow. Implements variational and HMC methods, as well as optimization. Church and others. Lisp-based inference programs. These are from the CS side. Church Anglican Stata: Since Stata 14 it has some Bayesian capabilities. It is mostly MH with Gibbs for a few models. Julia Mamba MCMC supporting multiple methods including Gibbs, MH, HMC, slice 9.4.2 Stan Some R packages. Official stan-dev packages: rstan rstanarm bayesplot ShinyStan loo Others: brms Bayesian generalized non-linear multilevel models using Stan ggmcmc 9.4.3 Diagrams 9.4.3.1 DAGs and Plate Notation See Plate notation tikz-bayesnet A TiKZ library for drawing Bayesian networks Daf A python package to draw DAGs Relevant Stackoverflow questions: [Software for drawing bayesian networks (graphical models)] (http://stats.stackexchange.com/questions/16750/software-for-drawing-bayesian-networks-graphical-models) Stackoverflow. Tikz Example how to draw plate indices in graphical model by tikz Stackexchange Can I have automatically adjusted plates in a graphical model? 9.4.3.2 Kruschke Diagrams Diagrams in the style of Kruschke’s Doing Bayesian Analysis LibreOffice Draw Templates: http://www.sumsar.net/blog/2013/10/diy-kruschke-style-diagrams/ Blog posts http://doingbayesiandataanalysis.blogspot.se/2012/05/graphical-model-diagrams-in-doing.html http://doingbayesiandataanalysis.blogspot.se/2012/05/hierarchical-diagrams-read-bottom-to.html http://doingbayesiandataanalysis.blogspot.se/2013/10/diagrams-for-hierarchical-models-we.html R scripts: https://github.com/rasmusab/distribution_diagrams Tikz scripts: https://github.com/yozw/bayesdiagram 9.4.3.3 Venn Diagrams/Eikosograms Oldford and W.H. Cherry. 2006. “Picturing Probability: the poverty of Venn diagrams, the richness of Eikosograms” 9.4.4 Political Science Bayesian Works Darmofal2009a: Darmofal, D. (2009), Bayesian Spatial Survival Models for Political Event Processes. American Journal of Political Science, 53: 241–257. doi:10.1111/j.1540-5907.2008.00368.x RosasShomerHaptonstahl2014a: Rosas, G., Shomer, Y. and Haptonstahl, S. R. (2015), No News Is News: Nonignorable Nonresponse in Roll-Call Data Analysis. American Journal of Political Science, 59: 511–528. doi:10.1111/ajps.12148 Joseph Bafumi, Andrew Gelman, David K. Park, Noah Kaplan; Practical Issues in Implementing and Understanding Bayesian Ideal Point Estimation. Polit Anal 2005; 13 (2): 171-187. doi: 10.1093/pan/mpi010 Arthur Spirling; Bayesian Approaches for Limited Dependent Variable Change Point Problems. Polit Anal 2007; 15 (4): 387-405. doi: 10.1093/pan/mpm022 Kari Lock, Andrew Gelman; Bayesian Combination of State Polls and Election Forecasts. Polit Anal 2010; 18 (3): 337-348. doi: 10.1093/pan/mpq002 Jacob M. Montgomery, Brendan Nyhan; Bayesian Model Averaging: Theoretical Developments and Practical Applications. Polit Anal 2010; 18 (2): 245-270. doi: 10.1093/pan/mpq001 Kevin M. Quinn; Bayesian Factor Analysis for Mixed Ordinal and Continuous Responses. Polit Anal 2004; 12 (4): 338-353. doi: 10.1093/pan/mph022 Ryan Bakker, Keith T. Poole; Bayesian Metric Multidimensional Scaling. Polit Anal 2013; 21 (1): 125-140. doi: 10.1093/pan/mps039 Clinton Joshua D, Jackman Simon D, Rivers Douglas. The statistical analysis of roll call data: A unified approach, American Political Science Review , 2004, vol. 98 (pg. 355-70) Pope Jeremy C, Treier Shawn A. Reconsidering the great compromise at the federal convention of 1787: Deliberation and agenda effects on the senate and slavery, American Journal of Political Science , 2011, vol. 55 (pg. 289-306) Martin Andrew D, Quinn Kevin M. Dynamic ideal point estimation via Markov chain Monte Carlo for the U.S. Supreme Court, 1953–1999, Political Analysis , 2002, vol. 10 (pg. 134-53) Justin Grimmer; A Bayesian Hierarchical Topic Model for Political Texts: Measuring Expressed Agendas in Senate Press Releases. Polit Anal 2010; 18 (1): 1-35. doi: 10.1093/pan/mpp034 Jacob M. Montgomery, Florian M. Hollenbach, Michael D. Ward; Improving Predictions Using Ensemble Bayesian Model Averaging. Polit Anal 2012; 20 (3): 271-291. doi: 10.1093/pan/mps002 Stegmueller2013a: Stegmueller, D. (2013), How Many Countries for Multilevel Modeling? A Comparison of Frequentist and Bayesian Approaches. American Journal of Political Science, 57: 748–761. doi:10.1111/ajps.12001 HareArmstrongBakkerEtAl2014a: Hare, C., Armstrong, D. A., Bakker, R., Carroll, R. and Poole, K. T. (2015), Using Bayesian Aldrich-McKelvey Scaling to Study Citizens’ Ideological Preferences and Perceptions. American Journal of Political Science, 59: 759–774. doi:10.1111/ajps.12151 HonakerKing2010a: Honaker, J. and King, G. (2010), What to Do about Missing Values in Time-Series Cross-Section Data. American Journal of Political Science, 54: 561–581. doi:10.1111/j.1540-5907.2010.00447.x ImaiTingley2011a: Imai, K. and Tingley, D. (2012), A Statistical Method for Empirical Testing of Competing Theories. American Journal of Political Science, 56: 218–236. doi:10.1111/j.1540-5907.2011.00555.x Park2010aL Hee Park, J. (2010), Structural Change in U.S. Presidents’ Use of Force. American Journal of Political Science, 54: 766–782. doi:10.1111/j.1540-5907.2010.00459.x 10.1111/j.1540-5907.2012.00590.x Park2012a: Park, J. H. (2012), A Unified Method for Dynamic and Cross-Sectional Heterogeneity: Introducing Hidden Markov Panel Models. American Journal of Political Science, 56: 1040–1054. doi:10.1111/j.1540- WawroKatznelson2013a: Wawro, G. J. and Katznelson, I. (2014), Designing Historical Social Scientific Inquiry: How Parameter Heterogeneity Can Bridge the Methodological Divide between Quantitative and Qualitative Approaches. American Journal of Political Science, 58: 526–546. doi:10.1111/ajps.12041 Western, B., &amp; Jackman, S. (1994). Bayesian Inference for Comparative Research. American Political Science Review, 88(2), 412-423. doi:10.2307/2944713 9.5 Model Checking Gelman, Andrew, and Iain Pardoe. 2006. “Bayesian Measures of Explained Variance and Pooling in Multilevel (Hierarchical) Models.” Technometrics 48 (2). Taylor &amp; Francis: 241–51. Gelman, Andrew. A Bayesian Formulation of Exploratory Data Analysis and Goodness-of-fit Testing. Internat. Statist. Rev. 71 (2003), no. 2, 369–382. http://projecteuclid.org/euclid.isr/1069172304. Kruschke, J. K. (2011). Bayesian assessment of null values via parameter estimation and model comparison. Perspectives on Psychological Science, 6(3) 299–312. Andrew Gelman Jessica Hwang and Aki Vehtari. 2013. Understanding predictive information criteria for Bayesian models. http://www.stat.columbia.edu/~gelman/research/published/waic_understand3.pdf Vehtari, Gelman, and Gabry. Practical Bayesian model evaluation using leave-one-out cross-validation and WAIC. 2016. http://www.stat.columbia.edu/~gelman/research/unpublished/loo_stan.pdf WAID. LOO package in R: https://github.com/stan-dev/loo Watanabe, S. (2010). Asymptotic equivalence of Bayes cross validation and widely application information criterion in singular learning theory. Journal of Machine Learning Research 11, 3571-3594. Gelfand, A. E. (1996). Model determination using sampling-based methods. In Markov Chain Monte Carlo in Practice, ed. W. R. Gilks, S. Richardson, D. J. Spiegelhalter, 145-162. London: Chapman and Hall. Gelfand, A. E., Dey, D. K., and Chang, H. (1992). Model determination using predictive distributions with implementation via sampling-based methods. In Bayesian Statistics 4, ed. J. M. Bernardo, J. O. Berger, A. P. Dawid, and A. F. M. Smith, 147-167. Oxford University Press. Gelman, A., Hwang, J., and Vehtari, A. (2014). Understanding predictive information criteria for Bayesian models. Statistics and Computing 24, 997-1016. Vehtari and Lampinen. 2002. Bayesian model assessment and comparison using cross-validation predictive densities. https://doi.org/10.1162/08997660260293292 Vehtari and Ojanen. 2012. A survey of Bayesian predictive methods for model assessment, selection and comparison. doi:10.1214/12-SS102 Cook, Gelman, and Rubin. 2006. Validation of Software for Bayesian Models Using Posterior Quantiles. J of Comp. and Graphical Stat DOI:10.1198/106186006X136976 9.6 General Applications and Models 9.6.1 Mixed Methods and Qualitative Research Macartan Humphreys and Alan M. Jacobs, 2015, “Mixing Methods: A Bayesian Approach”, American Political Science Review 9.7 Hierarchical Modeling Kruschke and Vanpaeml “Bayesian Estimation in Hierarchical Models” http://www.indiana.edu/~kruschke/articles/KruschkeVanpaemel2015.pdf David K. Park, Andrew Gelman, Joseph Bafumi. 2004. “Bayesian Multilevel Estimation with Poststratification: State-Level Estimates from National Polls.” Polit Anal doi:10.1093/pan/mph024 Lax, Jeffrey and Justin Phillips. 2009. “How Should We Estimate Public Opinion in the States?” AJPS 9.8 Shrinkage/Regularization Piironen and Vehtari. 2016. On the Hyperprior Choice for the Global Shrinkage Parameter in the Horseshoe Prior. https://arxiv.org/abs/1610.05559 Lopes. 2015. Bayesian Regularization slides. 9.8.1 Examples Monroe, B. L.; Colaresi, M. P. &amp; Quinn™, K. M. Fightin’ Words: Lexical Feature Selection and Evaluation for Identifying the Content of Political Conflict Political Analysis, Cambridge University Press (CUP), 2008, https://doi.org/10.1093/pan/mpn018 Beauchamp. 2016. Predicting and Interpolating State-Level Polls Using Twitter Textual Data: Juho Piironen, Aki Vehtari. Projection predictive model selection for Gaussian processes. https://arxiv.org/abs/1510.04813 forecasting and predictiing civil war (Fearon / Laitin) Goldstone et al. 2009. “A Global Model for Forecasting Political Instability” AJPS 10.1111/j.1540-5907.2009.00426.x Ward et al. 2017/ Lessons from near real-time forecasting of irregular leadership changes. JPR http://dx.doi.org/10.1177%2F0022343316680858 Andy Berger. Coup forecasts for 2017. http://andybeger.com/2017/02/10/coup-forecasts-2017/ http://imai.princeton.edu/research/files/afghan.pdf 9.8.2 Latent Variable Models CLINTON, J., JACKMAN, S., &amp; RIVERS, D. (2004). The Statistical Analysis of Roll Call Data. American Political Science Review, 98(2), 355-370. doi:10.1017/S0003055404001194 Pope, J. C. and Treier, S. (2011), Reconsidering the Great Compromise at the Federal Convention of 1787: Deliberation and Agenda Effects on the Senate and Slavery. American Journal of Political Science, 55: 289–306. doi:10.1111/j.1540-5907.2010.00490.x Cai et al. 2016. Item Response Theory. Ann rev of Stat and Its Application DOI: 10.1146/annurev-statistics-041715-033702 9.9 Bayes Theorem Examples 9.9.1 Miscallaneous Monty Hall Problem: http://marilynvossavant.com/game-show-problem/ Examples from Kahnehman Fenton, Neil, and Berger. 2016. “Bayes and the Law” Ann Rev of Stat and Its Application DOI: 10.1146/annurev-statistics-041715-033428 Taddy. 2013. Multinomial Inverse Regression for Text Analysis. JASA http://dx.doi.org/10.1080/01621459.2012.734168 Taddy. 2015. Document Classification by Inversion of Distributed Language Representations. Laver et al. 2003. Extracting Policy Positions from Political Texts Using Words as Data. Laver, Michael, Kenneth Benoit, and John Garry. “Extracting Policy Positions from Political Texts Using Words as Data.” The American Political Science Review. http://www.jstor.org/stable/3118211. 9.9.2 German Tank Problem https://en.wikipedia.org/wiki/German_tank_problem Goodman 1954. Some Practical Techniques in Serial Number Analysis. JASA doi:10.1080/01621459.1954.10501218 Johnson. 1994. Estimating the Size of a Population. Teaching Stats DOI:10.1111/j.1467-9639.1994.tb00688.x Ruggles and Brodie. 1947. An Empirical Approach to Economic Intelligence in World War II. doi:10.1080/01621459.1947.10501915 Other applications Gill and Spirling. 2015. Estimating the Severity of the WikiLeaks U.S. Diplomatic Cables Disclosure. https://doi.org/10.1093/pan/mpv005. Political Analysis doi:10.1093/pan/mpv005 9.10 Good-Turing Estimator Mosteller. 1964. Inference in an Authorship Problem. JASA 9.11 Reproducibility Jon Zelner: Docker package of an R and Stan project https://github.com/kjhealy/lintscreen https://msalganik.wordpress.com/2015/06/09/rapid-feedback-on-code-with-lintr/ https://msalganik.wordpress.com/2015/06/07/git-and-github-in-a-data-analysis-class/ http://astrofrog.github.io/blog/2013/04/10/how-to-conduct-a-full-code-review-on-github/ http://www.princeton.edu/~mjs3/soc504_s2015/submitting_homework.shtml https://education.github.com/guide https://msalganik.wordpress.com/2015/05/04/replication-and-extension-projects-making-class-more-interesting-and-useful/ https://en.wikipedia.org/wiki/Good%E2%80%93Turing_frequency_estimation https://dx.doi.org/10.1093%2Fbiomet%2F40.3-4.237 http://rstudio-pubs-static.s3.amazonaws.com/165358_78fd356d6e124331bd66981c51f7ad7c.html https://www.cs.cornell.edu/courses/cs6740/2010sp/guides/lec11.pdf https://www.rdocumentation.org/packages/edgeR/versions/3.14.0/topics/goodTuring http://kochanski.org/gpk/teaching/0401Oxford/GoodTuring.pdf http://www.cs.dartmouth.edu/~lorenzo/teaching/cs134/Archive/Spring2010/milestone/20100511-134-milestone-cooley/node5.html https://simons.berkeley.edu/events/openlectures2015-spring-1 http://www.grsampson.net/D_SGT.c https://courses.engr.illinois.edu/cs498jh/Slides/Lecture03HO.pdf http://ic.epfl.ch/files/content/sites/ic/files/Inka/Orlitsky%20Talk%202016.pdf 9.11.1 Uncategorized Travelling Politician Example: https://github.com/ctufts/metropolis_hastings_example/tree/master/claydavis 9.12 Empirical Bayes Efron. 2015. Frequentist accuracy of Bayesian estimates. JRSS B https://dx.doi.org/10.1111%2Frssb.12080 9.13 Things to cover Lindley’s paradox "],
["references-4.html", "References", " References "]
]
